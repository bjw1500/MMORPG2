// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_AddToInventory;
struct C_AddToInventoryDefaultTypeInternal;
extern C_AddToInventoryDefaultTypeInternal _C_AddToInventory_default_instance_;
class C_BuyItem;
struct C_BuyItemDefaultTypeInternal;
extern C_BuyItemDefaultTypeInternal _C_BuyItem_default_instance_;
class C_ChangedHP;
struct C_ChangedHPDefaultTypeInternal;
extern C_ChangedHPDefaultTypeInternal _C_ChangedHP_default_instance_;
class C_Chat;
struct C_ChatDefaultTypeInternal;
extern C_ChatDefaultTypeInternal _C_Chat_default_instance_;
class C_CreateAccount;
struct C_CreateAccountDefaultTypeInternal;
extern C_CreateAccountDefaultTypeInternal _C_CreateAccount_default_instance_;
class C_CreateCharacter;
struct C_CreateCharacterDefaultTypeInternal;
extern C_CreateCharacterDefaultTypeInternal _C_CreateCharacter_default_instance_;
class C_DeleteCharacter;
struct C_DeleteCharacterDefaultTypeInternal;
extern C_DeleteCharacterDefaultTypeInternal _C_DeleteCharacter_default_instance_;
class C_Die;
struct C_DieDefaultTypeInternal;
extern C_DieDefaultTypeInternal _C_Die_default_instance_;
class C_Disconnect;
struct C_DisconnectDefaultTypeInternal;
extern C_DisconnectDefaultTypeInternal _C_Disconnect_default_instance_;
class C_EnterRoom;
struct C_EnterRoomDefaultTypeInternal;
extern C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
class C_EquippedItem;
struct C_EquippedItemDefaultTypeInternal;
extern C_EquippedItemDefaultTypeInternal _C_EquippedItem_default_instance_;
class C_GetQuest;
struct C_GetQuestDefaultTypeInternal;
extern C_GetQuestDefaultTypeInternal _C_GetQuest_default_instance_;
class C_LoadingCharacterList;
struct C_LoadingCharacterListDefaultTypeInternal;
extern C_LoadingCharacterListDefaultTypeInternal _C_LoadingCharacterList_default_instance_;
class C_MonsterMove;
struct C_MonsterMoveDefaultTypeInternal;
extern C_MonsterMoveDefaultTypeInternal _C_MonsterMove_default_instance_;
class C_Move;
struct C_MoveDefaultTypeInternal;
extern C_MoveDefaultTypeInternal _C_Move_default_instance_;
class C_PickUpItem;
struct C_PickUpItemDefaultTypeInternal;
extern C_PickUpItemDefaultTypeInternal _C_PickUpItem_default_instance_;
class C_Skill;
struct C_SkillDefaultTypeInternal;
extern C_SkillDefaultTypeInternal _C_Skill_default_instance_;
class C_Spanw_Boss;
struct C_Spanw_BossDefaultTypeInternal;
extern C_Spanw_BossDefaultTypeInternal _C_Spanw_Boss_default_instance_;
class C_TryLogin;
struct C_TryLoginDefaultTypeInternal;
extern C_TryLoginDefaultTypeInternal _C_TryLogin_default_instance_;
class C_UpdateQuest;
struct C_UpdateQuestDefaultTypeInternal;
extern C_UpdateQuestDefaultTypeInternal _C_UpdateQuest_default_instance_;
class C_UseItem;
struct C_UseItemDefaultTypeInternal;
extern C_UseItemDefaultTypeInternal _C_UseItem_default_instance_;
class CharacterListElement;
struct CharacterListElementDefaultTypeInternal;
extern CharacterListElementDefaultTypeInternal _CharacterListElement_default_instance_;
class ItemInfo;
struct ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class S_AddObjects;
struct S_AddObjectsDefaultTypeInternal;
extern S_AddObjectsDefaultTypeInternal _S_AddObjects_default_instance_;
class S_AddToInventory;
struct S_AddToInventoryDefaultTypeInternal;
extern S_AddToInventoryDefaultTypeInternal _S_AddToInventory_default_instance_;
class S_BuyItem;
struct S_BuyItemDefaultTypeInternal;
extern S_BuyItemDefaultTypeInternal _S_BuyItem_default_instance_;
class S_ChangedHP;
struct S_ChangedHPDefaultTypeInternal;
extern S_ChangedHPDefaultTypeInternal _S_ChangedHP_default_instance_;
class S_Chat;
struct S_ChatDefaultTypeInternal;
extern S_ChatDefaultTypeInternal _S_Chat_default_instance_;
class S_Connect;
struct S_ConnectDefaultTypeInternal;
extern S_ConnectDefaultTypeInternal _S_Connect_default_instance_;
class S_CreateAccount;
struct S_CreateAccountDefaultTypeInternal;
extern S_CreateAccountDefaultTypeInternal _S_CreateAccount_default_instance_;
class S_CreateCharacter;
struct S_CreateCharacterDefaultTypeInternal;
extern S_CreateCharacterDefaultTypeInternal _S_CreateCharacter_default_instance_;
class S_Despawn;
struct S_DespawnDefaultTypeInternal;
extern S_DespawnDefaultTypeInternal _S_Despawn_default_instance_;
class S_Die;
struct S_DieDefaultTypeInternal;
extern S_DieDefaultTypeInternal _S_Die_default_instance_;
class S_Disconnect;
struct S_DisconnectDefaultTypeInternal;
extern S_DisconnectDefaultTypeInternal _S_Disconnect_default_instance_;
class S_DropItem;
struct S_DropItemDefaultTypeInternal;
extern S_DropItemDefaultTypeInternal _S_DropItem_default_instance_;
class S_EnterRoom;
struct S_EnterRoomDefaultTypeInternal;
extern S_EnterRoomDefaultTypeInternal _S_EnterRoom_default_instance_;
class S_EquippedItem;
struct S_EquippedItemDefaultTypeInternal;
extern S_EquippedItemDefaultTypeInternal _S_EquippedItem_default_instance_;
class S_FailedLogin;
struct S_FailedLoginDefaultTypeInternal;
extern S_FailedLoginDefaultTypeInternal _S_FailedLogin_default_instance_;
class S_GetQuest;
struct S_GetQuestDefaultTypeInternal;
extern S_GetQuestDefaultTypeInternal _S_GetQuest_default_instance_;
class S_LoadingCharacterList;
struct S_LoadingCharacterListDefaultTypeInternal;
extern S_LoadingCharacterListDefaultTypeInternal _S_LoadingCharacterList_default_instance_;
class S_Move;
struct S_MoveDefaultTypeInternal;
extern S_MoveDefaultTypeInternal _S_Move_default_instance_;
class S_PickUpItem;
struct S_PickUpItemDefaultTypeInternal;
extern S_PickUpItemDefaultTypeInternal _S_PickUpItem_default_instance_;
class S_RefreshInventory;
struct S_RefreshInventoryDefaultTypeInternal;
extern S_RefreshInventoryDefaultTypeInternal _S_RefreshInventory_default_instance_;
class S_Skill;
struct S_SkillDefaultTypeInternal;
extern S_SkillDefaultTypeInternal _S_Skill_default_instance_;
class S_SpawnMyPlayer;
struct S_SpawnMyPlayerDefaultTypeInternal;
extern S_SpawnMyPlayerDefaultTypeInternal _S_SpawnMyPlayer_default_instance_;
class S_SuccessLogin;
struct S_SuccessLoginDefaultTypeInternal;
extern S_SuccessLoginDefaultTypeInternal _S_SuccessLogin_default_instance_;
class S_Test;
struct S_TestDefaultTypeInternal;
extern S_TestDefaultTypeInternal _S_Test_default_instance_;
class S_UpdateInfo;
struct S_UpdateInfoDefaultTypeInternal;
extern S_UpdateInfoDefaultTypeInternal _S_UpdateInfo_default_instance_;
class S_UpdateMonster;
struct S_UpdateMonsterDefaultTypeInternal;
extern S_UpdateMonsterDefaultTypeInternal _S_UpdateMonster_default_instance_;
class S_UpdateQuest;
struct S_UpdateQuestDefaultTypeInternal;
extern S_UpdateQuestDefaultTypeInternal _S_UpdateQuest_default_instance_;
class S_UseItem;
struct S_UseItemDefaultTypeInternal;
extern S_UseItemDefaultTypeInternal _S_UseItem_default_instance_;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_AddToInventory* Arena::CreateMaybeMessage<::Protocol::C_AddToInventory>(Arena*);
template<> ::Protocol::C_BuyItem* Arena::CreateMaybeMessage<::Protocol::C_BuyItem>(Arena*);
template<> ::Protocol::C_ChangedHP* Arena::CreateMaybeMessage<::Protocol::C_ChangedHP>(Arena*);
template<> ::Protocol::C_Chat* Arena::CreateMaybeMessage<::Protocol::C_Chat>(Arena*);
template<> ::Protocol::C_CreateAccount* Arena::CreateMaybeMessage<::Protocol::C_CreateAccount>(Arena*);
template<> ::Protocol::C_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::C_CreateCharacter>(Arena*);
template<> ::Protocol::C_DeleteCharacter* Arena::CreateMaybeMessage<::Protocol::C_DeleteCharacter>(Arena*);
template<> ::Protocol::C_Die* Arena::CreateMaybeMessage<::Protocol::C_Die>(Arena*);
template<> ::Protocol::C_Disconnect* Arena::CreateMaybeMessage<::Protocol::C_Disconnect>(Arena*);
template<> ::Protocol::C_EnterRoom* Arena::CreateMaybeMessage<::Protocol::C_EnterRoom>(Arena*);
template<> ::Protocol::C_EquippedItem* Arena::CreateMaybeMessage<::Protocol::C_EquippedItem>(Arena*);
template<> ::Protocol::C_GetQuest* Arena::CreateMaybeMessage<::Protocol::C_GetQuest>(Arena*);
template<> ::Protocol::C_LoadingCharacterList* Arena::CreateMaybeMessage<::Protocol::C_LoadingCharacterList>(Arena*);
template<> ::Protocol::C_MonsterMove* Arena::CreateMaybeMessage<::Protocol::C_MonsterMove>(Arena*);
template<> ::Protocol::C_Move* Arena::CreateMaybeMessage<::Protocol::C_Move>(Arena*);
template<> ::Protocol::C_PickUpItem* Arena::CreateMaybeMessage<::Protocol::C_PickUpItem>(Arena*);
template<> ::Protocol::C_Skill* Arena::CreateMaybeMessage<::Protocol::C_Skill>(Arena*);
template<> ::Protocol::C_Spanw_Boss* Arena::CreateMaybeMessage<::Protocol::C_Spanw_Boss>(Arena*);
template<> ::Protocol::C_TryLogin* Arena::CreateMaybeMessage<::Protocol::C_TryLogin>(Arena*);
template<> ::Protocol::C_UpdateQuest* Arena::CreateMaybeMessage<::Protocol::C_UpdateQuest>(Arena*);
template<> ::Protocol::C_UseItem* Arena::CreateMaybeMessage<::Protocol::C_UseItem>(Arena*);
template<> ::Protocol::CharacterListElement* Arena::CreateMaybeMessage<::Protocol::CharacterListElement>(Arena*);
template<> ::Protocol::ItemInfo* Arena::CreateMaybeMessage<::Protocol::ItemInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::Position* Arena::CreateMaybeMessage<::Protocol::Position>(Arena*);
template<> ::Protocol::S_AddObjects* Arena::CreateMaybeMessage<::Protocol::S_AddObjects>(Arena*);
template<> ::Protocol::S_AddToInventory* Arena::CreateMaybeMessage<::Protocol::S_AddToInventory>(Arena*);
template<> ::Protocol::S_BuyItem* Arena::CreateMaybeMessage<::Protocol::S_BuyItem>(Arena*);
template<> ::Protocol::S_ChangedHP* Arena::CreateMaybeMessage<::Protocol::S_ChangedHP>(Arena*);
template<> ::Protocol::S_Chat* Arena::CreateMaybeMessage<::Protocol::S_Chat>(Arena*);
template<> ::Protocol::S_Connect* Arena::CreateMaybeMessage<::Protocol::S_Connect>(Arena*);
template<> ::Protocol::S_CreateAccount* Arena::CreateMaybeMessage<::Protocol::S_CreateAccount>(Arena*);
template<> ::Protocol::S_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::S_CreateCharacter>(Arena*);
template<> ::Protocol::S_Despawn* Arena::CreateMaybeMessage<::Protocol::S_Despawn>(Arena*);
template<> ::Protocol::S_Die* Arena::CreateMaybeMessage<::Protocol::S_Die>(Arena*);
template<> ::Protocol::S_Disconnect* Arena::CreateMaybeMessage<::Protocol::S_Disconnect>(Arena*);
template<> ::Protocol::S_DropItem* Arena::CreateMaybeMessage<::Protocol::S_DropItem>(Arena*);
template<> ::Protocol::S_EnterRoom* Arena::CreateMaybeMessage<::Protocol::S_EnterRoom>(Arena*);
template<> ::Protocol::S_EquippedItem* Arena::CreateMaybeMessage<::Protocol::S_EquippedItem>(Arena*);
template<> ::Protocol::S_FailedLogin* Arena::CreateMaybeMessage<::Protocol::S_FailedLogin>(Arena*);
template<> ::Protocol::S_GetQuest* Arena::CreateMaybeMessage<::Protocol::S_GetQuest>(Arena*);
template<> ::Protocol::S_LoadingCharacterList* Arena::CreateMaybeMessage<::Protocol::S_LoadingCharacterList>(Arena*);
template<> ::Protocol::S_Move* Arena::CreateMaybeMessage<::Protocol::S_Move>(Arena*);
template<> ::Protocol::S_PickUpItem* Arena::CreateMaybeMessage<::Protocol::S_PickUpItem>(Arena*);
template<> ::Protocol::S_RefreshInventory* Arena::CreateMaybeMessage<::Protocol::S_RefreshInventory>(Arena*);
template<> ::Protocol::S_Skill* Arena::CreateMaybeMessage<::Protocol::S_Skill>(Arena*);
template<> ::Protocol::S_SpawnMyPlayer* Arena::CreateMaybeMessage<::Protocol::S_SpawnMyPlayer>(Arena*);
template<> ::Protocol::S_SuccessLogin* Arena::CreateMaybeMessage<::Protocol::S_SuccessLogin>(Arena*);
template<> ::Protocol::S_Test* Arena::CreateMaybeMessage<::Protocol::S_Test>(Arena*);
template<> ::Protocol::S_UpdateInfo* Arena::CreateMaybeMessage<::Protocol::S_UpdateInfo>(Arena*);
template<> ::Protocol::S_UpdateMonster* Arena::CreateMaybeMessage<::Protocol::S_UpdateMonster>(Arena*);
template<> ::Protocol::S_UpdateQuest* Arena::CreateMaybeMessage<::Protocol::S_UpdateQuest>(Arena*);
template<> ::Protocol::S_UseItem* Arena::CreateMaybeMessage<::Protocol::S_UseItem>(Arena*);
template<> ::Protocol::Stat* Arena::CreateMaybeMessage<::Protocol::Stat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  PLAYER = 0,
  MONSTER = 1,
  ITEM = 2,
  UNKNOWN = 3,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = PLAYER;
constexpr ObjectType ObjectType_MAX = UNKNOWN;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum ItemType : int {
  WEAPON = 0,
  ARMOR = 1,
  CONSUMEABLE = 2,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = WEAPON;
constexpr ItemType ItemType_MAX = CONSUMEABLE;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum SkillType : int {
  ACTIVE = 0,
  PASSIVE = 1,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillType_IsValid(int value);
constexpr SkillType SkillType_MIN = ACTIVE;
constexpr SkillType SkillType_MAX = PASSIVE;
constexpr int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor();
template<typename T>
inline const std::string& SkillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillType_descriptor(), enum_t_value);
}
inline bool SkillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
enum Packet_ID : int {
  S_TEST = 0,
  S_ENTER_ROOM = 1,
  C_ENTER_ROOM = 2,
  S_MOVE = 3,
  C_MOVE = 4,
  S_DISCONNECT = 5,
  C_DISCONNECT = 6,
  S_SPAWN_MY_PLAYER = 7,
  S_ADDOBJECTS = 8,
  S_DEWSPAWN = 9,
  C_SKILL = 10,
  S_SKILL = 11,
  C_CHANGEDHP = 12,
  S_CHANGEDHP = 13,
  S_CONNECT = 14,
  C_TRYLOGIN = 15,
  S_SUCCESSLOGIN = 16,
  S_FAILEDLOGIN = 17,
  C_CREATEACCOUNT = 18,
  S_CREATEACCOUNT = 19,
  C_CHAT = 20,
  S_CHAT = 21,
  S_UPDATEMONSTER = 22,
  C_DIE = 23,
  S_DIE = 24,
  S_DROPITEM = 25,
  C_PICKUPITEM = 26,
  S_PICKUPITEM = 27,
  C_MONSTER_MOVE = 28,
  S_UPDATE_INFO = 29,
  C_ADD_TO_INVENTORY = 30,
  S_ADD_TO_INVENTORY = 31,
  C_EQUIPPED_ITEM = 32,
  S_EQUIPPED_ITEM = 33,
  C_LOADING_CHARACTERLIST = 34,
  S_LOADING_CHARACTERLIST = 35,
  C_CREATE_CHARACTER = 36,
  S_CREATE_CHARACTER = 37,
  C_DELETE_CHARACTER = 38,
  S_REFRESH_INVENTORY = 39,
  C_USE_ITEM = 40,
  S_USE_ITEM = 41,
  C_BUY_ITEM = 42,
  S_BUY_ITEM = 43,
  C_SPAWN_BOSS = 44,
  C_GET_QUEST = 45,
  S_GET_QUEST = 46,
  C_QUEST_UPDATE = 47,
  S_QUEST_UPDATE = 48,
  Packet_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Packet_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Packet_ID_IsValid(int value);
constexpr Packet_ID Packet_ID_MIN = S_TEST;
constexpr Packet_ID Packet_ID_MAX = S_QUEST_UPDATE;
constexpr int Packet_ID_ARRAYSIZE = Packet_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_ID_descriptor();
template<typename T>
inline const std::string& Packet_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_ID_descriptor(), enum_t_value);
}
inline bool Packet_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Packet_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_ID>(
    Packet_ID_descriptor(), name, value);
}
enum Skill_ID : int {
  DASH = 0,
  SKILL_1 = 1,
  SKILL_2 = 2,
  SKILL_3 = 3,
  ATTACK = 4,
  JUMP = 5,
  Skill_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Skill_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Skill_ID_IsValid(int value);
constexpr Skill_ID Skill_ID_MIN = DASH;
constexpr Skill_ID Skill_ID_MAX = JUMP;
constexpr int Skill_ID_ARRAYSIZE = Skill_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Skill_ID_descriptor();
template<typename T>
inline const std::string& Skill_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Skill_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Skill_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Skill_ID_descriptor(), enum_t_value);
}
inline bool Skill_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Skill_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Skill_ID>(
    Skill_ID_descriptor(), name, value);
}
enum CreatureState : int {
  Idle = 0,
  Move = 1,
  Attack = 2,
  Dead = 3,
  Casting = 4,
  CreatureState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureState_IsValid(int value);
constexpr CreatureState CreatureState_MIN = Idle;
constexpr CreatureState CreatureState_MAX = Casting;
constexpr int CreatureState_ARRAYSIZE = CreatureState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureState_descriptor();
template<typename T>
inline const std::string& CreatureState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureState_descriptor(), enum_t_value);
}
inline bool CreatureState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureState>(
    CreatureState_descriptor(), name, value);
}
// ===================================================================

class S_Test final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Test) */ {
 public:
  inline S_Test() : S_Test(nullptr) {}
  ~S_Test() override;
  explicit PROTOBUF_CONSTEXPR S_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Test(const S_Test& from);
  S_Test(S_Test&& from) noexcept
    : S_Test() {
    *this = ::std::move(from);
  }

  inline S_Test& operator=(const S_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Test& operator=(S_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Test* internal_default_instance() {
    return reinterpret_cast<const S_Test*>(
               &_S_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Test& a, S_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Test& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Test& from) {
    S_Test::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Test* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Test";
  }
  protected:
  explicit S_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kAttackFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 attack = 3;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    uint32_t hp_;
    uint32_t attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_EnterRoom) */ {
 public:
  inline S_EnterRoom() : S_EnterRoom(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_EnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EnterRoom(const S_EnterRoom& from);
  S_EnterRoom(S_EnterRoom&& from) noexcept
    : S_EnterRoom() {
    *this = ::std::move(from);
  }

  inline S_EnterRoom& operator=(const S_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EnterRoom& operator=(S_EnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EnterRoom* internal_default_instance() {
    return reinterpret_cast<const S_EnterRoom*>(
               &_S_EnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_EnterRoom& a, S_EnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_EnterRoom& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_EnterRoom& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EnterRoom";
  }
  protected:
  explicit S_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_EnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EnterRoom) */ {
 public:
  inline C_EnterRoom() : C_EnterRoom(nullptr) {}
  ~C_EnterRoom() override;
  explicit PROTOBUF_CONSTEXPR C_EnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EnterRoom(const C_EnterRoom& from);
  C_EnterRoom(C_EnterRoom&& from) noexcept
    : C_EnterRoom() {
    *this = ::std::move(from);
  }

  inline C_EnterRoom& operator=(const C_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EnterRoom& operator=(C_EnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EnterRoom* internal_default_instance() {
    return reinterpret_cast<const C_EnterRoom*>(
               &_C_EnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_EnterRoom& a, C_EnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EnterRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EnterRoom& from) {
    C_EnterRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EnterRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EnterRoom";
  }
  protected:
  explicit C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // int32 CharacterId = 1;
  void clear_characterid();
  int32_t characterid() const;
  void set_characterid(int32_t value);
  private:
  int32_t _internal_characterid() const;
  void _internal_set_characterid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t characterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Move) */ {
 public:
  inline S_Move() : S_Move(nullptr) {}
  ~S_Move() override;
  explicit PROTOBUF_CONSTEXPR S_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Move(const S_Move& from);
  S_Move(S_Move&& from) noexcept
    : S_Move() {
    *this = ::std::move(from);
  }

  inline S_Move& operator=(const S_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Move& operator=(S_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Move* internal_default_instance() {
    return reinterpret_cast<const S_Move*>(
               &_S_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Move& a, S_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Move& from) {
    S_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Move";
  }
  protected:
  explicit S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Move) */ {
 public:
  inline C_Move() : C_Move(nullptr) {}
  ~C_Move() override;
  explicit PROTOBUF_CONSTEXPR C_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Move(const C_Move& from);
  C_Move(C_Move&& from) noexcept
    : C_Move() {
    *this = ::std::move(from);
  }

  inline C_Move& operator=(const C_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Move& operator=(C_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Move* internal_default_instance() {
    return reinterpret_cast<const C_Move*>(
               &_C_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_Move& a, C_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Move& from) {
    C_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Move";
  }
  protected:
  explicit C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Disconnect) */ {
 public:
  inline S_Disconnect() : S_Disconnect(nullptr) {}
  ~S_Disconnect() override;
  explicit PROTOBUF_CONSTEXPR S_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Disconnect(const S_Disconnect& from);
  S_Disconnect(S_Disconnect&& from) noexcept
    : S_Disconnect() {
    *this = ::std::move(from);
  }

  inline S_Disconnect& operator=(const S_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Disconnect& operator=(S_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Disconnect* internal_default_instance() {
    return reinterpret_cast<const S_Disconnect*>(
               &_S_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_Disconnect& a, S_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Disconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Disconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Disconnect& from) {
    S_Disconnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Disconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Disconnect";
  }
  protected:
  explicit S_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Disconnect) */ {
 public:
  inline C_Disconnect() : C_Disconnect(nullptr) {}
  ~C_Disconnect() override;
  explicit PROTOBUF_CONSTEXPR C_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Disconnect(const C_Disconnect& from);
  C_Disconnect(C_Disconnect&& from) noexcept
    : C_Disconnect() {
    *this = ::std::move(from);
  }

  inline C_Disconnect& operator=(const C_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Disconnect& operator=(C_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Disconnect* internal_default_instance() {
    return reinterpret_cast<const C_Disconnect*>(
               &_C_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_Disconnect& a, C_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Disconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Disconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Disconnect& from) {
    C_Disconnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Disconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Disconnect";
  }
  protected:
  explicit C_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SpawnMyPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SpawnMyPlayer) */ {
 public:
  inline S_SpawnMyPlayer() : S_SpawnMyPlayer(nullptr) {}
  ~S_SpawnMyPlayer() override;
  explicit PROTOBUF_CONSTEXPR S_SpawnMyPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SpawnMyPlayer(const S_SpawnMyPlayer& from);
  S_SpawnMyPlayer(S_SpawnMyPlayer&& from) noexcept
    : S_SpawnMyPlayer() {
    *this = ::std::move(from);
  }

  inline S_SpawnMyPlayer& operator=(const S_SpawnMyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SpawnMyPlayer& operator=(S_SpawnMyPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SpawnMyPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SpawnMyPlayer* internal_default_instance() {
    return reinterpret_cast<const S_SpawnMyPlayer*>(
               &_S_SpawnMyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_SpawnMyPlayer& a, S_SpawnMyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SpawnMyPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SpawnMyPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SpawnMyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SpawnMyPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SpawnMyPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SpawnMyPlayer& from) {
    S_SpawnMyPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SpawnMyPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SpawnMyPlayer";
  }
  protected:
  explicit S_SpawnMyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_SpawnMyPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_AddObjects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_AddObjects) */ {
 public:
  inline S_AddObjects() : S_AddObjects(nullptr) {}
  ~S_AddObjects() override;
  explicit PROTOBUF_CONSTEXPR S_AddObjects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_AddObjects(const S_AddObjects& from);
  S_AddObjects(S_AddObjects&& from) noexcept
    : S_AddObjects() {
    *this = ::std::move(from);
  }

  inline S_AddObjects& operator=(const S_AddObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_AddObjects& operator=(S_AddObjects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_AddObjects& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_AddObjects* internal_default_instance() {
    return reinterpret_cast<const S_AddObjects*>(
               &_S_AddObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_AddObjects& a, S_AddObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(S_AddObjects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_AddObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_AddObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_AddObjects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_AddObjects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_AddObjects& from) {
    S_AddObjects::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_AddObjects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_AddObjects";
  }
  protected:
  explicit S_AddObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Protocol::ObjectInfo* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objects();
  public:
  const ::Protocol::ObjectInfo& objects(int index) const;
  ::Protocol::ObjectInfo* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_AddObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Despawn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Despawn) */ {
 public:
  inline S_Despawn() : S_Despawn(nullptr) {}
  ~S_Despawn() override;
  explicit PROTOBUF_CONSTEXPR S_Despawn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Despawn(const S_Despawn& from);
  S_Despawn(S_Despawn&& from) noexcept
    : S_Despawn() {
    *this = ::std::move(from);
  }

  inline S_Despawn& operator=(const S_Despawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Despawn& operator=(S_Despawn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Despawn& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Despawn* internal_default_instance() {
    return reinterpret_cast<const S_Despawn*>(
               &_S_Despawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_Despawn& a, S_Despawn& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Despawn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Despawn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Despawn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Despawn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Despawn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Despawn& from) {
    S_Despawn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Despawn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Despawn";
  }
  protected:
  explicit S_Despawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Protocol::ObjectInfo* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objects();
  public:
  const ::Protocol::ObjectInfo& objects(int index) const;
  ::Protocol::ObjectInfo* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_Despawn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Skill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Skill) */ {
 public:
  inline C_Skill() : C_Skill(nullptr) {}
  ~C_Skill() override;
  explicit PROTOBUF_CONSTEXPR C_Skill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Skill(const C_Skill& from);
  C_Skill(C_Skill&& from) noexcept
    : C_Skill() {
    *this = ::std::move(from);
  }

  inline C_Skill& operator=(const C_Skill& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Skill& operator=(C_Skill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Skill& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Skill* internal_default_instance() {
    return reinterpret_cast<const C_Skill*>(
               &_C_Skill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_Skill& a, C_Skill& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Skill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Skill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Skill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Skill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Skill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Skill& from) {
    C_Skill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Skill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Skill";
  }
  protected:
  explicit C_Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kAttackIndexFieldNumber = 3,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // int32 skillId = 2;
  void clear_skillid();
  int32_t skillid() const;
  void set_skillid(int32_t value);
  private:
  int32_t _internal_skillid() const;
  void _internal_set_skillid(int32_t value);
  public:

  // int32 AttackIndex = 3;
  void clear_attackindex();
  int32_t attackindex() const;
  void set_attackindex(int32_t value);
  private:
  int32_t _internal_attackindex() const;
  void _internal_set_attackindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Skill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    int32_t skillid_;
    int32_t attackindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Skill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Skill) */ {
 public:
  inline S_Skill() : S_Skill(nullptr) {}
  ~S_Skill() override;
  explicit PROTOBUF_CONSTEXPR S_Skill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Skill(const S_Skill& from);
  S_Skill(S_Skill&& from) noexcept
    : S_Skill() {
    *this = ::std::move(from);
  }

  inline S_Skill& operator=(const S_Skill& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Skill& operator=(S_Skill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Skill& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Skill* internal_default_instance() {
    return reinterpret_cast<const S_Skill*>(
               &_S_Skill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_Skill& a, S_Skill& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Skill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Skill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Skill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Skill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Skill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Skill& from) {
    S_Skill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Skill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Skill";
  }
  protected:
  explicit S_Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kAttackIndexFieldNumber = 3,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // int32 skillId = 2;
  void clear_skillid();
  int32_t skillid() const;
  void set_skillid(int32_t value);
  private:
  int32_t _internal_skillid() const;
  void _internal_set_skillid(int32_t value);
  public:

  // int32 AttackIndex = 3;
  void clear_attackindex();
  int32_t attackindex() const;
  void set_attackindex(int32_t value);
  private:
  int32_t _internal_attackindex() const;
  void _internal_set_attackindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Skill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    int32_t skillid_;
    int32_t attackindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ChangedHP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ChangedHP) */ {
 public:
  inline C_ChangedHP() : C_ChangedHP(nullptr) {}
  ~C_ChangedHP() override;
  explicit PROTOBUF_CONSTEXPR C_ChangedHP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ChangedHP(const C_ChangedHP& from);
  C_ChangedHP(C_ChangedHP&& from) noexcept
    : C_ChangedHP() {
    *this = ::std::move(from);
  }

  inline C_ChangedHP& operator=(const C_ChangedHP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ChangedHP& operator=(C_ChangedHP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ChangedHP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ChangedHP* internal_default_instance() {
    return reinterpret_cast<const C_ChangedHP*>(
               &_C_ChangedHP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_ChangedHP& a, C_ChangedHP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ChangedHP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ChangedHP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ChangedHP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ChangedHP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ChangedHP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ChangedHP& from) {
    C_ChangedHP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ChangedHP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ChangedHP";
  }
  protected:
  explicit C_ChangedHP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDamageCauserFieldNumber = 2,
    kDamageAmountFieldNumber = 3,
  };
  // .Protocol.ObjectInfo Target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Protocol::ObjectInfo& target() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_target();
  ::Protocol::ObjectInfo* mutable_target();
  void set_allocated_target(::Protocol::ObjectInfo* target);
  private:
  const ::Protocol::ObjectInfo& _internal_target() const;
  ::Protocol::ObjectInfo* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::Protocol::ObjectInfo* target);
  ::Protocol::ObjectInfo* unsafe_arena_release_target();

  // .Protocol.ObjectInfo DamageCauser = 2;
  bool has_damagecauser() const;
  private:
  bool _internal_has_damagecauser() const;
  public:
  void clear_damagecauser();
  const ::Protocol::ObjectInfo& damagecauser() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_damagecauser();
  ::Protocol::ObjectInfo* mutable_damagecauser();
  void set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser);
  private:
  const ::Protocol::ObjectInfo& _internal_damagecauser() const;
  ::Protocol::ObjectInfo* _internal_mutable_damagecauser();
  public:
  void unsafe_arena_set_allocated_damagecauser(
      ::Protocol::ObjectInfo* damagecauser);
  ::Protocol::ObjectInfo* unsafe_arena_release_damagecauser();

  // int32 DamageAmount = 3;
  void clear_damageamount();
  int32_t damageamount() const;
  void set_damageamount(int32_t value);
  private:
  int32_t _internal_damageamount() const;
  void _internal_set_damageamount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ChangedHP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* target_;
    ::Protocol::ObjectInfo* damagecauser_;
    int32_t damageamount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ChangedHP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ChangedHP) */ {
 public:
  inline S_ChangedHP() : S_ChangedHP(nullptr) {}
  ~S_ChangedHP() override;
  explicit PROTOBUF_CONSTEXPR S_ChangedHP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ChangedHP(const S_ChangedHP& from);
  S_ChangedHP(S_ChangedHP&& from) noexcept
    : S_ChangedHP() {
    *this = ::std::move(from);
  }

  inline S_ChangedHP& operator=(const S_ChangedHP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ChangedHP& operator=(S_ChangedHP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ChangedHP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ChangedHP* internal_default_instance() {
    return reinterpret_cast<const S_ChangedHP*>(
               &_S_ChangedHP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_ChangedHP& a, S_ChangedHP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ChangedHP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ChangedHP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ChangedHP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ChangedHP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ChangedHP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ChangedHP& from) {
    S_ChangedHP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ChangedHP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ChangedHP";
  }
  protected:
  explicit S_ChangedHP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDamageCauserFieldNumber = 2,
    kDamageAmountFieldNumber = 3,
  };
  // .Protocol.ObjectInfo Target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Protocol::ObjectInfo& target() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_target();
  ::Protocol::ObjectInfo* mutable_target();
  void set_allocated_target(::Protocol::ObjectInfo* target);
  private:
  const ::Protocol::ObjectInfo& _internal_target() const;
  ::Protocol::ObjectInfo* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::Protocol::ObjectInfo* target);
  ::Protocol::ObjectInfo* unsafe_arena_release_target();

  // .Protocol.ObjectInfo DamageCauser = 2;
  bool has_damagecauser() const;
  private:
  bool _internal_has_damagecauser() const;
  public:
  void clear_damagecauser();
  const ::Protocol::ObjectInfo& damagecauser() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_damagecauser();
  ::Protocol::ObjectInfo* mutable_damagecauser();
  void set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser);
  private:
  const ::Protocol::ObjectInfo& _internal_damagecauser() const;
  ::Protocol::ObjectInfo* _internal_mutable_damagecauser();
  public:
  void unsafe_arena_set_allocated_damagecauser(
      ::Protocol::ObjectInfo* damagecauser);
  ::Protocol::ObjectInfo* unsafe_arena_release_damagecauser();

  // int32 DamageAmount = 3;
  void clear_damageamount();
  int32_t damageamount() const;
  void set_damageamount(int32_t value);
  private:
  int32_t _internal_damageamount() const;
  void _internal_set_damageamount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ChangedHP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* target_;
    ::Protocol::ObjectInfo* damagecauser_;
    int32_t damageamount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Connect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Connect) */ {
 public:
  inline S_Connect() : S_Connect(nullptr) {}
  ~S_Connect() override;
  explicit PROTOBUF_CONSTEXPR S_Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Connect(const S_Connect& from);
  S_Connect(S_Connect&& from) noexcept
    : S_Connect() {
    *this = ::std::move(from);
  }

  inline S_Connect& operator=(const S_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Connect& operator=(S_Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Connect* internal_default_instance() {
    return reinterpret_cast<const S_Connect*>(
               &_S_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_Connect& a, S_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Connect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Connect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Connect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Connect& from) {
    S_Connect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Connect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Connect";
  }
  protected:
  explicit S_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // string Info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_TryLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_TryLogin) */ {
 public:
  inline C_TryLogin() : C_TryLogin(nullptr) {}
  ~C_TryLogin() override;
  explicit PROTOBUF_CONSTEXPR C_TryLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_TryLogin(const C_TryLogin& from);
  C_TryLogin(C_TryLogin&& from) noexcept
    : C_TryLogin() {
    *this = ::std::move(from);
  }

  inline C_TryLogin& operator=(const C_TryLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_TryLogin& operator=(C_TryLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_TryLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_TryLogin* internal_default_instance() {
    return reinterpret_cast<const C_TryLogin*>(
               &_C_TryLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C_TryLogin& a, C_TryLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(C_TryLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_TryLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_TryLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_TryLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_TryLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_TryLogin& from) {
    C_TryLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_TryLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_TryLogin";
  }
  protected:
  explicit C_TryLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_TryLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SuccessLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SuccessLogin) */ {
 public:
  inline S_SuccessLogin() : S_SuccessLogin(nullptr) {}
  ~S_SuccessLogin() override;
  explicit PROTOBUF_CONSTEXPR S_SuccessLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SuccessLogin(const S_SuccessLogin& from);
  S_SuccessLogin(S_SuccessLogin&& from) noexcept
    : S_SuccessLogin() {
    *this = ::std::move(from);
  }

  inline S_SuccessLogin& operator=(const S_SuccessLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SuccessLogin& operator=(S_SuccessLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SuccessLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SuccessLogin* internal_default_instance() {
    return reinterpret_cast<const S_SuccessLogin*>(
               &_S_SuccessLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_SuccessLogin& a, S_SuccessLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SuccessLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SuccessLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SuccessLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SuccessLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SuccessLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SuccessLogin& from) {
    S_SuccessLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SuccessLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SuccessLogin";
  }
  protected:
  explicit S_SuccessLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // string Info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SuccessLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_FailedLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FailedLogin) */ {
 public:
  inline S_FailedLogin() : S_FailedLogin(nullptr) {}
  ~S_FailedLogin() override;
  explicit PROTOBUF_CONSTEXPR S_FailedLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FailedLogin(const S_FailedLogin& from);
  S_FailedLogin(S_FailedLogin&& from) noexcept
    : S_FailedLogin() {
    *this = ::std::move(from);
  }

  inline S_FailedLogin& operator=(const S_FailedLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FailedLogin& operator=(S_FailedLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FailedLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FailedLogin* internal_default_instance() {
    return reinterpret_cast<const S_FailedLogin*>(
               &_S_FailedLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_FailedLogin& a, S_FailedLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FailedLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FailedLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FailedLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FailedLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FailedLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FailedLogin& from) {
    S_FailedLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FailedLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FailedLogin";
  }
  protected:
  explicit S_FailedLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // string Info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FailedLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CreateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CreateAccount) */ {
 public:
  inline C_CreateAccount() : C_CreateAccount(nullptr) {}
  ~C_CreateAccount() override;
  explicit PROTOBUF_CONSTEXPR C_CreateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CreateAccount(const C_CreateAccount& from);
  C_CreateAccount(C_CreateAccount&& from) noexcept
    : C_CreateAccount() {
    *this = ::std::move(from);
  }

  inline C_CreateAccount& operator=(const C_CreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CreateAccount& operator=(C_CreateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CreateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CreateAccount* internal_default_instance() {
    return reinterpret_cast<const C_CreateAccount*>(
               &_C_CreateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_CreateAccount& a, C_CreateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CreateAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CreateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CreateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CreateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CreateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CreateAccount& from) {
    C_CreateAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CreateAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CreateAccount";
  }
  protected:
  explicit C_CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CreateAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CreateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CreateAccount) */ {
 public:
  inline S_CreateAccount() : S_CreateAccount(nullptr) {}
  ~S_CreateAccount() override;
  explicit PROTOBUF_CONSTEXPR S_CreateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CreateAccount(const S_CreateAccount& from);
  S_CreateAccount(S_CreateAccount&& from) noexcept
    : S_CreateAccount() {
    *this = ::std::move(from);
  }

  inline S_CreateAccount& operator=(const S_CreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CreateAccount& operator=(S_CreateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CreateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CreateAccount* internal_default_instance() {
    return reinterpret_cast<const S_CreateAccount*>(
               &_S_CreateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_CreateAccount& a, S_CreateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CreateAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CreateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CreateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CreateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CreateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CreateAccount& from) {
    S_CreateAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CreateAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CreateAccount";
  }
  protected:
  explicit S_CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMsgFieldNumber = 4,
    kResultFieldNumber = 3,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 result = 3;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CreateAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Chat) */ {
 public:
  inline C_Chat() : C_Chat(nullptr) {}
  ~C_Chat() override;
  explicit PROTOBUF_CONSTEXPR C_Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Chat(const C_Chat& from);
  C_Chat(C_Chat&& from) noexcept
    : C_Chat() {
    *this = ::std::move(from);
  }

  inline C_Chat& operator=(const C_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Chat& operator=(C_Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Chat* internal_default_instance() {
    return reinterpret_cast<const C_Chat*>(
               &_C_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_Chat& a, C_Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Chat& from) {
    C_Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Chat";
  }
  protected:
  explicit C_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Chat) */ {
 public:
  inline S_Chat() : S_Chat(nullptr) {}
  ~S_Chat() override;
  explicit PROTOBUF_CONSTEXPR S_Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Chat(const S_Chat& from);
  S_Chat(S_Chat&& from) noexcept
    : S_Chat() {
    *this = ::std::move(from);
  }

  inline S_Chat& operator=(const S_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Chat& operator=(S_Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Chat* internal_default_instance() {
    return reinterpret_cast<const S_Chat*>(
               &_S_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_Chat& a, S_Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Chat& from) {
    S_Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Chat";
  }
  protected:
  explicit S_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMsgFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UpdateMonster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UpdateMonster) */ {
 public:
  inline S_UpdateMonster() : S_UpdateMonster(nullptr) {}
  ~S_UpdateMonster() override;
  explicit PROTOBUF_CONSTEXPR S_UpdateMonster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UpdateMonster(const S_UpdateMonster& from);
  S_UpdateMonster(S_UpdateMonster&& from) noexcept
    : S_UpdateMonster() {
    *this = ::std::move(from);
  }

  inline S_UpdateMonster& operator=(const S_UpdateMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UpdateMonster& operator=(S_UpdateMonster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UpdateMonster& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UpdateMonster* internal_default_instance() {
    return reinterpret_cast<const S_UpdateMonster*>(
               &_S_UpdateMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_UpdateMonster& a, S_UpdateMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UpdateMonster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UpdateMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UpdateMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UpdateMonster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UpdateMonster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UpdateMonster& from) {
    S_UpdateMonster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UpdateMonster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UpdateMonster";
  }
  protected:
  explicit S_UpdateMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_UpdateMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Die final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Die) */ {
 public:
  inline C_Die() : C_Die(nullptr) {}
  ~C_Die() override;
  explicit PROTOBUF_CONSTEXPR C_Die(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Die(const C_Die& from);
  C_Die(C_Die&& from) noexcept
    : C_Die() {
    *this = ::std::move(from);
  }

  inline C_Die& operator=(const C_Die& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Die& operator=(C_Die&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Die& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Die* internal_default_instance() {
    return reinterpret_cast<const C_Die*>(
               &_C_Die_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(C_Die& a, C_Die& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Die* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Die* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Die* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Die>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Die& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Die& from) {
    C_Die::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Die* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Die";
  }
  protected:
  explicit C_Die(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDamageCauserFieldNumber = 2,
  };
  // .Protocol.ObjectInfo Target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Protocol::ObjectInfo& target() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_target();
  ::Protocol::ObjectInfo* mutable_target();
  void set_allocated_target(::Protocol::ObjectInfo* target);
  private:
  const ::Protocol::ObjectInfo& _internal_target() const;
  ::Protocol::ObjectInfo* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::Protocol::ObjectInfo* target);
  ::Protocol::ObjectInfo* unsafe_arena_release_target();

  // .Protocol.ObjectInfo DamageCauser = 2;
  bool has_damagecauser() const;
  private:
  bool _internal_has_damagecauser() const;
  public:
  void clear_damagecauser();
  const ::Protocol::ObjectInfo& damagecauser() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_damagecauser();
  ::Protocol::ObjectInfo* mutable_damagecauser();
  void set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser);
  private:
  const ::Protocol::ObjectInfo& _internal_damagecauser() const;
  ::Protocol::ObjectInfo* _internal_mutable_damagecauser();
  public:
  void unsafe_arena_set_allocated_damagecauser(
      ::Protocol::ObjectInfo* damagecauser);
  ::Protocol::ObjectInfo* unsafe_arena_release_damagecauser();

  // @@protoc_insertion_point(class_scope:Protocol.C_Die)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* target_;
    ::Protocol::ObjectInfo* damagecauser_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Die final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Die) */ {
 public:
  inline S_Die() : S_Die(nullptr) {}
  ~S_Die() override;
  explicit PROTOBUF_CONSTEXPR S_Die(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Die(const S_Die& from);
  S_Die(S_Die&& from) noexcept
    : S_Die() {
    *this = ::std::move(from);
  }

  inline S_Die& operator=(const S_Die& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Die& operator=(S_Die&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Die& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Die* internal_default_instance() {
    return reinterpret_cast<const S_Die*>(
               &_S_Die_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_Die& a, S_Die& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Die* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Die* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Die* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Die>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Die& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Die& from) {
    S_Die::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Die* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Die";
  }
  protected:
  explicit S_Die(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDamageCauserFieldNumber = 2,
  };
  // .Protocol.ObjectInfo Target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Protocol::ObjectInfo& target() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_target();
  ::Protocol::ObjectInfo* mutable_target();
  void set_allocated_target(::Protocol::ObjectInfo* target);
  private:
  const ::Protocol::ObjectInfo& _internal_target() const;
  ::Protocol::ObjectInfo* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::Protocol::ObjectInfo* target);
  ::Protocol::ObjectInfo* unsafe_arena_release_target();

  // .Protocol.ObjectInfo DamageCauser = 2;
  bool has_damagecauser() const;
  private:
  bool _internal_has_damagecauser() const;
  public:
  void clear_damagecauser();
  const ::Protocol::ObjectInfo& damagecauser() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_damagecauser();
  ::Protocol::ObjectInfo* mutable_damagecauser();
  void set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser);
  private:
  const ::Protocol::ObjectInfo& _internal_damagecauser() const;
  ::Protocol::ObjectInfo* _internal_mutable_damagecauser();
  public:
  void unsafe_arena_set_allocated_damagecauser(
      ::Protocol::ObjectInfo* damagecauser);
  ::Protocol::ObjectInfo* unsafe_arena_release_damagecauser();

  // @@protoc_insertion_point(class_scope:Protocol.S_Die)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* target_;
    ::Protocol::ObjectInfo* damagecauser_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DropItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DropItem) */ {
 public:
  inline S_DropItem() : S_DropItem(nullptr) {}
  ~S_DropItem() override;
  explicit PROTOBUF_CONSTEXPR S_DropItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DropItem(const S_DropItem& from);
  S_DropItem(S_DropItem&& from) noexcept
    : S_DropItem() {
    *this = ::std::move(from);
  }

  inline S_DropItem& operator=(const S_DropItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DropItem& operator=(S_DropItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DropItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DropItem* internal_default_instance() {
    return reinterpret_cast<const S_DropItem*>(
               &_S_DropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_DropItem& a, S_DropItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DropItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DropItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DropItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DropItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DropItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DropItem& from) {
    S_DropItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DropItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DropItem";
  }
  protected:
  explicit S_DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemInfoFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .Protocol.ItemInfo ItemInfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // int32 Count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DropItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ItemInfo* iteminfo_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PickUpItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PickUpItem) */ {
 public:
  inline C_PickUpItem() : C_PickUpItem(nullptr) {}
  ~C_PickUpItem() override;
  explicit PROTOBUF_CONSTEXPR C_PickUpItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PickUpItem(const C_PickUpItem& from);
  C_PickUpItem(C_PickUpItem&& from) noexcept
    : C_PickUpItem() {
    *this = ::std::move(from);
  }

  inline C_PickUpItem& operator=(const C_PickUpItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PickUpItem& operator=(C_PickUpItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PickUpItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PickUpItem* internal_default_instance() {
    return reinterpret_cast<const C_PickUpItem*>(
               &_C_PickUpItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_PickUpItem& a, C_PickUpItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PickUpItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PickUpItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PickUpItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PickUpItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PickUpItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PickUpItem& from) {
    C_PickUpItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PickUpItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PickUpItem";
  }
  protected:
  explicit C_PickUpItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kPickItemFieldNumber = 2,
  };
  // .Protocol.ObjectInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // .Protocol.ObjectInfo PickItem = 2;
  bool has_pickitem() const;
  private:
  bool _internal_has_pickitem() const;
  public:
  void clear_pickitem();
  const ::Protocol::ObjectInfo& pickitem() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_pickitem();
  ::Protocol::ObjectInfo* mutable_pickitem();
  void set_allocated_pickitem(::Protocol::ObjectInfo* pickitem);
  private:
  const ::Protocol::ObjectInfo& _internal_pickitem() const;
  ::Protocol::ObjectInfo* _internal_mutable_pickitem();
  public:
  void unsafe_arena_set_allocated_pickitem(
      ::Protocol::ObjectInfo* pickitem);
  ::Protocol::ObjectInfo* unsafe_arena_release_pickitem();

  // @@protoc_insertion_point(class_scope:Protocol.C_PickUpItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    ::Protocol::ObjectInfo* pickitem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PickUpItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PickUpItem) */ {
 public:
  inline S_PickUpItem() : S_PickUpItem(nullptr) {}
  ~S_PickUpItem() override;
  explicit PROTOBUF_CONSTEXPR S_PickUpItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PickUpItem(const S_PickUpItem& from);
  S_PickUpItem(S_PickUpItem&& from) noexcept
    : S_PickUpItem() {
    *this = ::std::move(from);
  }

  inline S_PickUpItem& operator=(const S_PickUpItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PickUpItem& operator=(S_PickUpItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PickUpItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PickUpItem* internal_default_instance() {
    return reinterpret_cast<const S_PickUpItem*>(
               &_S_PickUpItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_PickUpItem& a, S_PickUpItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PickUpItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PickUpItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PickUpItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PickUpItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PickUpItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PickUpItem& from) {
    S_PickUpItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PickUpItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PickUpItem";
  }
  protected:
  explicit S_PickUpItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kPickItemFieldNumber = 2,
    kItemInfoFieldNumber = 3,
  };
  // .Protocol.ObjectInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // .Protocol.ObjectInfo PickItem = 2;
  bool has_pickitem() const;
  private:
  bool _internal_has_pickitem() const;
  public:
  void clear_pickitem();
  const ::Protocol::ObjectInfo& pickitem() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_pickitem();
  ::Protocol::ObjectInfo* mutable_pickitem();
  void set_allocated_pickitem(::Protocol::ObjectInfo* pickitem);
  private:
  const ::Protocol::ObjectInfo& _internal_pickitem() const;
  ::Protocol::ObjectInfo* _internal_mutable_pickitem();
  public:
  void unsafe_arena_set_allocated_pickitem(
      ::Protocol::ObjectInfo* pickitem);
  ::Protocol::ObjectInfo* unsafe_arena_release_pickitem();

  // .Protocol.ItemInfo ItemInfo = 3;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_PickUpItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    ::Protocol::ObjectInfo* pickitem_;
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MonsterMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MonsterMove) */ {
 public:
  inline C_MonsterMove() : C_MonsterMove(nullptr) {}
  ~C_MonsterMove() override;
  explicit PROTOBUF_CONSTEXPR C_MonsterMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MonsterMove(const C_MonsterMove& from);
  C_MonsterMove(C_MonsterMove&& from) noexcept
    : C_MonsterMove() {
    *this = ::std::move(from);
  }

  inline C_MonsterMove& operator=(const C_MonsterMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MonsterMove& operator=(C_MonsterMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MonsterMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MonsterMove* internal_default_instance() {
    return reinterpret_cast<const C_MonsterMove*>(
               &_C_MonsterMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_MonsterMove& a, C_MonsterMove& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MonsterMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MonsterMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MonsterMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MonsterMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MonsterMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MonsterMove& from) {
    C_MonsterMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MonsterMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MonsterMove";
  }
  protected:
  explicit C_MonsterMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_MonsterMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UpdateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UpdateInfo) */ {
 public:
  inline S_UpdateInfo() : S_UpdateInfo(nullptr) {}
  ~S_UpdateInfo() override;
  explicit PROTOBUF_CONSTEXPR S_UpdateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UpdateInfo(const S_UpdateInfo& from);
  S_UpdateInfo(S_UpdateInfo&& from) noexcept
    : S_UpdateInfo() {
    *this = ::std::move(from);
  }

  inline S_UpdateInfo& operator=(const S_UpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UpdateInfo& operator=(S_UpdateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UpdateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UpdateInfo* internal_default_instance() {
    return reinterpret_cast<const S_UpdateInfo*>(
               &_S_UpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_UpdateInfo& a, S_UpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UpdateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UpdateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UpdateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UpdateInfo& from) {
    S_UpdateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UpdateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UpdateInfo";
  }
  protected:
  explicit S_UpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_UpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_AddToInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_AddToInventory) */ {
 public:
  inline C_AddToInventory() : C_AddToInventory(nullptr) {}
  ~C_AddToInventory() override;
  explicit PROTOBUF_CONSTEXPR C_AddToInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AddToInventory(const C_AddToInventory& from);
  C_AddToInventory(C_AddToInventory&& from) noexcept
    : C_AddToInventory() {
    *this = ::std::move(from);
  }

  inline C_AddToInventory& operator=(const C_AddToInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AddToInventory& operator=(C_AddToInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AddToInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AddToInventory* internal_default_instance() {
    return reinterpret_cast<const C_AddToInventory*>(
               &_C_AddToInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C_AddToInventory& a, C_AddToInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AddToInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AddToInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_AddToInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_AddToInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_AddToInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_AddToInventory& from) {
    C_AddToInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AddToInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_AddToInventory";
  }
  protected:
  explicit C_AddToInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kItemInfoFieldNumber = 2,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ObjectInfo ItemInfo = 2;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ObjectInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_iteminfo();
  ::Protocol::ObjectInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ObjectInfo* iteminfo);
  private:
  const ::Protocol::ObjectInfo& _internal_iteminfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ObjectInfo* iteminfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_AddToInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ObjectInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_AddToInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_AddToInventory) */ {
 public:
  inline S_AddToInventory() : S_AddToInventory(nullptr) {}
  ~S_AddToInventory() override;
  explicit PROTOBUF_CONSTEXPR S_AddToInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_AddToInventory(const S_AddToInventory& from);
  S_AddToInventory(S_AddToInventory&& from) noexcept
    : S_AddToInventory() {
    *this = ::std::move(from);
  }

  inline S_AddToInventory& operator=(const S_AddToInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_AddToInventory& operator=(S_AddToInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_AddToInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_AddToInventory* internal_default_instance() {
    return reinterpret_cast<const S_AddToInventory*>(
               &_S_AddToInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S_AddToInventory& a, S_AddToInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S_AddToInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_AddToInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_AddToInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_AddToInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_AddToInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_AddToInventory& from) {
    S_AddToInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_AddToInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_AddToInventory";
  }
  protected:
  explicit S_AddToInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kPlayerInfoFieldNumber = 1,
  };
  // repeated .Protocol.ItemInfo Items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
      mutable_items();
  private:
  const ::Protocol::ItemInfo& _internal_items(int index) const;
  ::Protocol::ItemInfo* _internal_add_items();
  public:
  const ::Protocol::ItemInfo& items(int index) const;
  ::Protocol::ItemInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
      items() const;

  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_AddToInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo > items_;
    ::Protocol::ObjectInfo* playerinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EquippedItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EquippedItem) */ {
 public:
  inline C_EquippedItem() : C_EquippedItem(nullptr) {}
  ~C_EquippedItem() override;
  explicit PROTOBUF_CONSTEXPR C_EquippedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EquippedItem(const C_EquippedItem& from);
  C_EquippedItem(C_EquippedItem&& from) noexcept
    : C_EquippedItem() {
    *this = ::std::move(from);
  }

  inline C_EquippedItem& operator=(const C_EquippedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EquippedItem& operator=(C_EquippedItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EquippedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EquippedItem* internal_default_instance() {
    return reinterpret_cast<const C_EquippedItem*>(
               &_C_EquippedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_EquippedItem& a, C_EquippedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EquippedItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EquippedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EquippedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EquippedItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EquippedItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EquippedItem& from) {
    C_EquippedItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EquippedItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EquippedItem";
  }
  protected:
  explicit C_EquippedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kItemInfoFieldNumber = 2,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ItemInfo ItemInfo = 2;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_EquippedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EquippedItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EquippedItem) */ {
 public:
  inline S_EquippedItem() : S_EquippedItem(nullptr) {}
  ~S_EquippedItem() override;
  explicit PROTOBUF_CONSTEXPR S_EquippedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EquippedItem(const S_EquippedItem& from);
  S_EquippedItem(S_EquippedItem&& from) noexcept
    : S_EquippedItem() {
    *this = ::std::move(from);
  }

  inline S_EquippedItem& operator=(const S_EquippedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EquippedItem& operator=(S_EquippedItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EquippedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EquippedItem* internal_default_instance() {
    return reinterpret_cast<const S_EquippedItem*>(
               &_S_EquippedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(S_EquippedItem& a, S_EquippedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EquippedItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EquippedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EquippedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EquippedItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EquippedItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EquippedItem& from) {
    S_EquippedItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EquippedItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EquippedItem";
  }
  protected:
  explicit S_EquippedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kItemInfoFieldNumber = 2,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ItemInfo ItemInfo = 2;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_EquippedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LoadingCharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LoadingCharacterList) */ {
 public:
  inline C_LoadingCharacterList() : C_LoadingCharacterList(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LoadingCharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LoadingCharacterList(const C_LoadingCharacterList& from);
  C_LoadingCharacterList(C_LoadingCharacterList&& from) noexcept
    : C_LoadingCharacterList() {
    *this = ::std::move(from);
  }

  inline C_LoadingCharacterList& operator=(const C_LoadingCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LoadingCharacterList& operator=(C_LoadingCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LoadingCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LoadingCharacterList* internal_default_instance() {
    return reinterpret_cast<const C_LoadingCharacterList*>(
               &_C_LoadingCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(C_LoadingCharacterList& a, C_LoadingCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LoadingCharacterList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LoadingCharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LoadingCharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LoadingCharacterList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LoadingCharacterList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LoadingCharacterList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LoadingCharacterList";
  }
  protected:
  explicit C_LoadingCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LoadingCharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LoadingCharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LoadingCharacterList) */ {
 public:
  inline S_LoadingCharacterList() : S_LoadingCharacterList(nullptr) {}
  ~S_LoadingCharacterList() override;
  explicit PROTOBUF_CONSTEXPR S_LoadingCharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LoadingCharacterList(const S_LoadingCharacterList& from);
  S_LoadingCharacterList(S_LoadingCharacterList&& from) noexcept
    : S_LoadingCharacterList() {
    *this = ::std::move(from);
  }

  inline S_LoadingCharacterList& operator=(const S_LoadingCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LoadingCharacterList& operator=(S_LoadingCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LoadingCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LoadingCharacterList* internal_default_instance() {
    return reinterpret_cast<const S_LoadingCharacterList*>(
               &_S_LoadingCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S_LoadingCharacterList& a, S_LoadingCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LoadingCharacterList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LoadingCharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LoadingCharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LoadingCharacterList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LoadingCharacterList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LoadingCharacterList& from) {
    S_LoadingCharacterList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LoadingCharacterList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LoadingCharacterList";
  }
  protected:
  explicit S_LoadingCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterListFieldNumber = 1,
  };
  // repeated .Protocol.CharacterListElement CharacterList = 1;
  int characterlist_size() const;
  private:
  int _internal_characterlist_size() const;
  public:
  void clear_characterlist();
  ::Protocol::CharacterListElement* mutable_characterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::CharacterListElement >*
      mutable_characterlist();
  private:
  const ::Protocol::CharacterListElement& _internal_characterlist(int index) const;
  ::Protocol::CharacterListElement* _internal_add_characterlist();
  public:
  const ::Protocol::CharacterListElement& characterlist(int index) const;
  ::Protocol::CharacterListElement* add_characterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::CharacterListElement >&
      characterlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_LoadingCharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::CharacterListElement > characterlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CreateCharacter) */ {
 public:
  inline C_CreateCharacter() : C_CreateCharacter(nullptr) {}
  ~C_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CreateCharacter(const C_CreateCharacter& from);
  C_CreateCharacter(C_CreateCharacter&& from) noexcept
    : C_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline C_CreateCharacter& operator=(const C_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CreateCharacter& operator=(C_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const C_CreateCharacter*>(
               &_C_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(C_CreateCharacter& a, C_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CreateCharacter& from) {
    C_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CreateCharacter";
  }
  protected:
  explicit C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTemplatedIdFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 TemplatedId = 1;
  void clear_templatedid();
  int32_t templatedid() const;
  void set_templatedid(int32_t value);
  private:
  int32_t _internal_templatedid() const;
  void _internal_set_templatedid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t templatedid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_CreateCharacter) */ {
 public:
  inline S_CreateCharacter() : S_CreateCharacter(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CreateCharacter(const S_CreateCharacter& from);
  S_CreateCharacter(S_CreateCharacter&& from) noexcept
    : S_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline S_CreateCharacter& operator=(const S_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CreateCharacter& operator=(S_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const S_CreateCharacter*>(
               &_S_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(S_CreateCharacter& a, S_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_CreateCharacter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_CreateCharacter& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CreateCharacter";
  }
  protected:
  explicit S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_DeleteCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DeleteCharacter) */ {
 public:
  inline C_DeleteCharacter() : C_DeleteCharacter(nullptr) {}
  ~C_DeleteCharacter() override;
  explicit PROTOBUF_CONSTEXPR C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DeleteCharacter(const C_DeleteCharacter& from);
  C_DeleteCharacter(C_DeleteCharacter&& from) noexcept
    : C_DeleteCharacter() {
    *this = ::std::move(from);
  }

  inline C_DeleteCharacter& operator=(const C_DeleteCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DeleteCharacter& operator=(C_DeleteCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DeleteCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DeleteCharacter* internal_default_instance() {
    return reinterpret_cast<const C_DeleteCharacter*>(
               &_C_DeleteCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(C_DeleteCharacter& a, C_DeleteCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DeleteCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DeleteCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DeleteCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DeleteCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DeleteCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_DeleteCharacter& from) {
    C_DeleteCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DeleteCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DeleteCharacter";
  }
  protected:
  explicit C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // int32 Slot = 1;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DeleteCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RefreshInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RefreshInventory) */ {
 public:
  inline S_RefreshInventory() : S_RefreshInventory(nullptr) {}
  ~S_RefreshInventory() override;
  explicit PROTOBUF_CONSTEXPR S_RefreshInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RefreshInventory(const S_RefreshInventory& from);
  S_RefreshInventory(S_RefreshInventory&& from) noexcept
    : S_RefreshInventory() {
    *this = ::std::move(from);
  }

  inline S_RefreshInventory& operator=(const S_RefreshInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RefreshInventory& operator=(S_RefreshInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RefreshInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RefreshInventory* internal_default_instance() {
    return reinterpret_cast<const S_RefreshInventory*>(
               &_S_RefreshInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(S_RefreshInventory& a, S_RefreshInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RefreshInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RefreshInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_RefreshInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_RefreshInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_RefreshInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_RefreshInventory& from) {
    S_RefreshInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RefreshInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RefreshInventory";
  }
  protected:
  explicit S_RefreshInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kPlayerInfoFieldNumber = 1,
    kGoldFieldNumber = 3,
  };
  // repeated .Protocol.ItemInfo Items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
      mutable_items();
  private:
  const ::Protocol::ItemInfo& _internal_items(int index) const;
  ::Protocol::ItemInfo* _internal_add_items();
  public:
  const ::Protocol::ItemInfo& items(int index) const;
  ::Protocol::ItemInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
      items() const;

  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // int32 Gold = 3;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_RefreshInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo > items_;
    ::Protocol::ObjectInfo* playerinfo_;
    int32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_UseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_UseItem) */ {
 public:
  inline C_UseItem() : C_UseItem(nullptr) {}
  ~C_UseItem() override;
  explicit PROTOBUF_CONSTEXPR C_UseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_UseItem(const C_UseItem& from);
  C_UseItem(C_UseItem&& from) noexcept
    : C_UseItem() {
    *this = ::std::move(from);
  }

  inline C_UseItem& operator=(const C_UseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_UseItem& operator=(C_UseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_UseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_UseItem* internal_default_instance() {
    return reinterpret_cast<const C_UseItem*>(
               &_C_UseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(C_UseItem& a, C_UseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_UseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_UseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_UseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_UseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_UseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_UseItem& from) {
    C_UseItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_UseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_UseItem";
  }
  protected:
  explicit C_UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kItemInfoFieldNumber = 2,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ItemInfo ItemInfo = 2;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_UseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UseItem) */ {
 public:
  inline S_UseItem() : S_UseItem(nullptr) {}
  ~S_UseItem() override;
  explicit PROTOBUF_CONSTEXPR S_UseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UseItem(const S_UseItem& from);
  S_UseItem(S_UseItem&& from) noexcept
    : S_UseItem() {
    *this = ::std::move(from);
  }

  inline S_UseItem& operator=(const S_UseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UseItem& operator=(S_UseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UseItem* internal_default_instance() {
    return reinterpret_cast<const S_UseItem*>(
               &_S_UseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(S_UseItem& a, S_UseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UseItem& from) {
    S_UseItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UseItem";
  }
  protected:
  explicit S_UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kItemInfoFieldNumber = 2,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ItemInfo ItemInfo = 2;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_UseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_BuyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BuyItem) */ {
 public:
  inline C_BuyItem() : C_BuyItem(nullptr) {}
  ~C_BuyItem() override;
  explicit PROTOBUF_CONSTEXPR C_BuyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BuyItem(const C_BuyItem& from);
  C_BuyItem(C_BuyItem&& from) noexcept
    : C_BuyItem() {
    *this = ::std::move(from);
  }

  inline C_BuyItem& operator=(const C_BuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BuyItem& operator=(C_BuyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BuyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BuyItem* internal_default_instance() {
    return reinterpret_cast<const C_BuyItem*>(
               &_C_BuyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(C_BuyItem& a, C_BuyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BuyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BuyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BuyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BuyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BuyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BuyItem& from) {
    C_BuyItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BuyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BuyItem";
  }
  protected:
  explicit C_BuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemTemplatedIdFieldNumber = 2,
  };
  // int32 ItemTemplatedId = 2;
  void clear_itemtemplatedid();
  int32_t itemtemplatedid() const;
  void set_itemtemplatedid(int32_t value);
  private:
  int32_t _internal_itemtemplatedid() const;
  void _internal_set_itemtemplatedid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BuyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t itemtemplatedid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_BuyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BuyItem) */ {
 public:
  inline S_BuyItem() : S_BuyItem(nullptr) {}
  ~S_BuyItem() override;
  explicit PROTOBUF_CONSTEXPR S_BuyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BuyItem(const S_BuyItem& from);
  S_BuyItem(S_BuyItem&& from) noexcept
    : S_BuyItem() {
    *this = ::std::move(from);
  }

  inline S_BuyItem& operator=(const S_BuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BuyItem& operator=(S_BuyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BuyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BuyItem* internal_default_instance() {
    return reinterpret_cast<const S_BuyItem*>(
               &_S_BuyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(S_BuyItem& a, S_BuyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BuyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BuyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BuyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BuyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BuyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BuyItem& from) {
    S_BuyItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BuyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BuyItem";
  }
  protected:
  explicit S_BuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 Result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BuyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Spanw_Boss final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_Spanw_Boss) */ {
 public:
  inline C_Spanw_Boss() : C_Spanw_Boss(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_Spanw_Boss(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Spanw_Boss(const C_Spanw_Boss& from);
  C_Spanw_Boss(C_Spanw_Boss&& from) noexcept
    : C_Spanw_Boss() {
    *this = ::std::move(from);
  }

  inline C_Spanw_Boss& operator=(const C_Spanw_Boss& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Spanw_Boss& operator=(C_Spanw_Boss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Spanw_Boss& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Spanw_Boss* internal_default_instance() {
    return reinterpret_cast<const C_Spanw_Boss*>(
               &_C_Spanw_Boss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(C_Spanw_Boss& a, C_Spanw_Boss& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Spanw_Boss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Spanw_Boss* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Spanw_Boss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Spanw_Boss>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_Spanw_Boss& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_Spanw_Boss& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Spanw_Boss";
  }
  protected:
  explicit C_Spanw_Boss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_Spanw_Boss)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GetQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GetQuest) */ {
 public:
  inline C_GetQuest() : C_GetQuest(nullptr) {}
  ~C_GetQuest() override;
  explicit PROTOBUF_CONSTEXPR C_GetQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GetQuest(const C_GetQuest& from);
  C_GetQuest(C_GetQuest&& from) noexcept
    : C_GetQuest() {
    *this = ::std::move(from);
  }

  inline C_GetQuest& operator=(const C_GetQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GetQuest& operator=(C_GetQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GetQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GetQuest* internal_default_instance() {
    return reinterpret_cast<const C_GetQuest*>(
               &_C_GetQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(C_GetQuest& a, C_GetQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GetQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GetQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_GetQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_GetQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_GetQuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_GetQuest& from) {
    C_GetQuest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GetQuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GetQuest";
  }
  protected:
  explicit C_GetQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestTemplatedIdFieldNumber = 1,
  };
  // int32 QuestTemplatedId = 1;
  void clear_questtemplatedid();
  int32_t questtemplatedid() const;
  void set_questtemplatedid(int32_t value);
  private:
  int32_t _internal_questtemplatedid() const;
  void _internal_set_questtemplatedid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GetQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t questtemplatedid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GetQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GetQuest) */ {
 public:
  inline S_GetQuest() : S_GetQuest(nullptr) {}
  ~S_GetQuest() override;
  explicit PROTOBUF_CONSTEXPR S_GetQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GetQuest(const S_GetQuest& from);
  S_GetQuest(S_GetQuest&& from) noexcept
    : S_GetQuest() {
    *this = ::std::move(from);
  }

  inline S_GetQuest& operator=(const S_GetQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GetQuest& operator=(S_GetQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GetQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GetQuest* internal_default_instance() {
    return reinterpret_cast<const S_GetQuest*>(
               &_S_GetQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(S_GetQuest& a, S_GetQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GetQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GetQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_GetQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_GetQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_GetQuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_GetQuest& from) {
    S_GetQuest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GetQuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GetQuest";
  }
  protected:
  explicit S_GetQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestTemplatedIdFieldNumber = 1,
    kCurrentProgressFieldNumber = 2,
  };
  // int32 QuestTemplatedId = 1;
  void clear_questtemplatedid();
  int32_t questtemplatedid() const;
  void set_questtemplatedid(int32_t value);
  private:
  int32_t _internal_questtemplatedid() const;
  void _internal_set_questtemplatedid(int32_t value);
  public:

  // int32 CurrentProgress = 2;
  void clear_currentprogress();
  int32_t currentprogress() const;
  void set_currentprogress(int32_t value);
  private:
  int32_t _internal_currentprogress() const;
  void _internal_set_currentprogress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_GetQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t questtemplatedid_;
    int32_t currentprogress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_UpdateQuest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_UpdateQuest) */ {
 public:
  inline C_UpdateQuest() : C_UpdateQuest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_UpdateQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_UpdateQuest(const C_UpdateQuest& from);
  C_UpdateQuest(C_UpdateQuest&& from) noexcept
    : C_UpdateQuest() {
    *this = ::std::move(from);
  }

  inline C_UpdateQuest& operator=(const C_UpdateQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_UpdateQuest& operator=(C_UpdateQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_UpdateQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_UpdateQuest* internal_default_instance() {
    return reinterpret_cast<const C_UpdateQuest*>(
               &_C_UpdateQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(C_UpdateQuest& a, C_UpdateQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(C_UpdateQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_UpdateQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_UpdateQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_UpdateQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_UpdateQuest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_UpdateQuest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_UpdateQuest";
  }
  protected:
  explicit C_UpdateQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_UpdateQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UpdateQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UpdateQuest) */ {
 public:
  inline S_UpdateQuest() : S_UpdateQuest(nullptr) {}
  ~S_UpdateQuest() override;
  explicit PROTOBUF_CONSTEXPR S_UpdateQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UpdateQuest(const S_UpdateQuest& from);
  S_UpdateQuest(S_UpdateQuest&& from) noexcept
    : S_UpdateQuest() {
    *this = ::std::move(from);
  }

  inline S_UpdateQuest& operator=(const S_UpdateQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UpdateQuest& operator=(S_UpdateQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UpdateQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UpdateQuest* internal_default_instance() {
    return reinterpret_cast<const S_UpdateQuest*>(
               &_S_UpdateQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(S_UpdateQuest& a, S_UpdateQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UpdateQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UpdateQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UpdateQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UpdateQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UpdateQuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UpdateQuest& from) {
    S_UpdateQuest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UpdateQuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UpdateQuest";
  }
  protected:
  explicit S_UpdateQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestTemplatedIdFieldNumber = 1,
    kCurrentProgressFieldNumber = 2,
  };
  // int32 QuestTemplatedId = 1;
  void clear_questtemplatedid();
  int32_t questtemplatedid() const;
  void set_questtemplatedid(int32_t value);
  private:
  int32_t _internal_questtemplatedid() const;
  void _internal_set_questtemplatedid(int32_t value);
  public:

  // int32 CurrentProgress = 2;
  void clear_currentprogress();
  int32_t currentprogress() const;
  void set_currentprogress(int32_t value);
  private:
  int32_t _internal_currentprogress() const;
  void _internal_set_currentprogress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_UpdateQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t questtemplatedid_;
    int32_t currentprogress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPositionFieldNumber = 4,
    kStatFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTargetIdFieldNumber = 6,
    kStateFieldNumber = 7,
    kTemplateIdFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Position& position() const;
  PROTOBUF_NODISCARD ::Protocol::Position* release_position();
  ::Protocol::Position* mutable_position();
  void set_allocated_position(::Protocol::Position* position);
  private:
  const ::Protocol::Position& _internal_position() const;
  ::Protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Position* position);
  ::Protocol::Position* unsafe_arena_release_position();

  // .Protocol.Stat stat = 5;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::Protocol::Stat& stat() const;
  PROTOBUF_NODISCARD ::Protocol::Stat* release_stat();
  ::Protocol::Stat* mutable_stat();
  void set_allocated_stat(::Protocol::Stat* stat);
  private:
  const ::Protocol::Stat& _internal_stat() const;
  ::Protocol::Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::Protocol::Stat* stat);
  ::Protocol::Stat* unsafe_arena_release_stat();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .Protocol.ObjectType type = 3;
  void clear_type();
  ::Protocol::ObjectType type() const;
  void set_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_type() const;
  void _internal_set_type(::Protocol::ObjectType value);
  public:

  // int32 targetId = 6;
  void clear_targetid();
  int32_t targetid() const;
  void set_targetid(int32_t value);
  private:
  int32_t _internal_targetid() const;
  void _internal_set_targetid(int32_t value);
  public:

  // .Protocol.CreatureState State = 7;
  void clear_state();
  ::Protocol::CreatureState state() const;
  void set_state(::Protocol::CreatureState value);
  private:
  ::Protocol::CreatureState _internal_state() const;
  void _internal_set_state(::Protocol::CreatureState value);
  public:

  // int32 templateId = 8;
  void clear_templateid();
  int32_t templateid() const;
  void set_templateid(int32_t value);
  private:
  int32_t _internal_templateid() const;
  void _internal_set_templateid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Protocol::Position* position_;
    ::Protocol::Stat* stat_;
    int32_t id_;
    int type_;
    int32_t targetid_;
    int state_;
    int32_t templateid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemInfo) */ {
 public:
  inline ItemInfo() : ItemInfo(nullptr) {}
  ~ItemInfo() override;
  explicit PROTOBUF_CONSTEXPR ItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemInfo& from) {
    ItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemInfo";
  }
  protected:
  explicit ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDatabaseIdFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
    kDamageFieldNumber = 4,
    kArmorFieldNumber = 5,
    kItemTypeFieldNumber = 6,
    kCountFieldNumber = 7,
    kSlotFieldNumber = 8,
    kIsEquippedFieldNumber = 9,
    kPriceFieldNumber = 10,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 DatabaseId = 1;
  void clear_databaseid();
  int32_t databaseid() const;
  void set_databaseid(int32_t value);
  private:
  int32_t _internal_databaseid() const;
  void _internal_set_databaseid(int32_t value);
  public:

  // int32 templateId = 2;
  void clear_templateid();
  int32_t templateid() const;
  void set_templateid(int32_t value);
  private:
  int32_t _internal_templateid() const;
  void _internal_set_templateid(int32_t value);
  public:

  // int32 damage = 4;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // int32 Armor = 5;
  void clear_armor();
  int32_t armor() const;
  void set_armor(int32_t value);
  private:
  int32_t _internal_armor() const;
  void _internal_set_armor(int32_t value);
  public:

  // .Protocol.ItemType itemType = 6;
  void clear_itemtype();
  ::Protocol::ItemType itemtype() const;
  void set_itemtype(::Protocol::ItemType value);
  private:
  ::Protocol::ItemType _internal_itemtype() const;
  void _internal_set_itemtype(::Protocol::ItemType value);
  public:

  // int32 count = 7;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 slot = 8;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // int32 IsEquipped = 9;
  void clear_isequipped();
  int32_t isequipped() const;
  void set_isequipped(int32_t value);
  private:
  int32_t _internal_isequipped() const;
  void _internal_set_isequipped(int32_t value);
  public:

  // int32 Price = 10;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t databaseid_;
    int32_t templateid_;
    int32_t damage_;
    int32_t armor_;
    int itemtype_;
    int32_t count_;
    int32_t slot_;
    int32_t isequipped_;
    int32_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationXFieldNumber = 1,
    kLocationYFieldNumber = 2,
    kLocationZFieldNumber = 3,
    kRotationXFieldNumber = 4,
    kRotationYFieldNumber = 5,
    kRotationZFieldNumber = 6,
    kVelocityXFieldNumber = 7,
    kVelocityYFieldNumber = 8,
    kVelocityZFieldNumber = 9,
    kHorizontalFieldNumber = 10,
    kVerticalFieldNumber = 11,
    kIsRunningFieldNumber = 12,
  };
  // float LocationX = 1;
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // float LocationY = 2;
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // float LocationZ = 3;
  void clear_locationz();
  float locationz() const;
  void set_locationz(float value);
  private:
  float _internal_locationz() const;
  void _internal_set_locationz(float value);
  public:

  // float RotationX = 4;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float RotationY = 5;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float RotationZ = 6;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // float VelocityX = 7;
  void clear_velocityx();
  float velocityx() const;
  void set_velocityx(float value);
  private:
  float _internal_velocityx() const;
  void _internal_set_velocityx(float value);
  public:

  // float VelocityY = 8;
  void clear_velocityy();
  float velocityy() const;
  void set_velocityy(float value);
  private:
  float _internal_velocityy() const;
  void _internal_set_velocityy(float value);
  public:

  // float VelocityZ = 9;
  void clear_velocityz();
  float velocityz() const;
  void set_velocityz(float value);
  private:
  float _internal_velocityz() const;
  void _internal_set_velocityz(float value);
  public:

  // float Horizontal = 10;
  void clear_horizontal();
  float horizontal() const;
  void set_horizontal(float value);
  private:
  float _internal_horizontal() const;
  void _internal_set_horizontal(float value);
  public:

  // float Vertical = 11;
  void clear_vertical();
  float vertical() const;
  void set_vertical(float value);
  private:
  float _internal_vertical() const;
  void _internal_set_vertical(float value);
  public:

  // int32 IsRunning = 12;
  void clear_isrunning();
  int32_t isrunning() const;
  void set_isrunning(int32_t value);
  private:
  int32_t _internal_isrunning() const;
  void _internal_set_isrunning(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float locationx_;
    float locationy_;
    float locationz_;
    float rotationx_;
    float rotationy_;
    float rotationz_;
    float velocityx_;
    float velocityy_;
    float velocityz_;
    float horizontal_;
    float vertical_;
    int32_t isrunning_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit PROTOBUF_CONSTEXPR Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stat& from) {
    Stat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 9,
    kLevelFieldNumber = 1,
    kMaxHpFieldNumber = 2,
    kHpFieldNumber = 3,
    kDamageFieldNumber = 4,
    kAttackRangeFieldNumber = 5,
    kSearchRangeFieldNumber = 6,
    kMoveSpeedFieldNumber = 7,
    kTotalExpFieldNumber = 8,
  };
  // repeated string Skills = 9;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const char* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // int32 Level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 MaxHp = 2;
  void clear_maxhp();
  int32_t maxhp() const;
  void set_maxhp(int32_t value);
  private:
  int32_t _internal_maxhp() const;
  void _internal_set_maxhp(int32_t value);
  public:

  // int32 Hp = 3;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // float Damage = 4;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // float AttackRange = 5;
  void clear_attackrange();
  float attackrange() const;
  void set_attackrange(float value);
  private:
  float _internal_attackrange() const;
  void _internal_set_attackrange(float value);
  public:

  // float SearchRange = 6;
  void clear_searchrange();
  float searchrange() const;
  void set_searchrange(float value);
  private:
  float _internal_searchrange() const;
  void _internal_set_searchrange(float value);
  public:

  // float MoveSpeed = 7;
  void clear_movespeed();
  float movespeed() const;
  void set_movespeed(float value);
  private:
  float _internal_movespeed() const;
  void _internal_set_movespeed(float value);
  public:

  // int32 TotalExp = 8;
  void clear_totalexp();
  int32_t totalexp() const;
  void set_totalexp(int32_t value);
  private:
  int32_t _internal_totalexp() const;
  void _internal_set_totalexp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
    int32_t level_;
    int32_t maxhp_;
    int32_t hp_;
    float damage_;
    float attackrange_;
    float searchrange_;
    float movespeed_;
    int32_t totalexp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CharacterListElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CharacterListElement) */ {
 public:
  inline CharacterListElement() : CharacterListElement(nullptr) {}
  ~CharacterListElement() override;
  explicit PROTOBUF_CONSTEXPR CharacterListElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterListElement(const CharacterListElement& from);
  CharacterListElement(CharacterListElement&& from) noexcept
    : CharacterListElement() {
    *this = ::std::move(from);
  }

  inline CharacterListElement& operator=(const CharacterListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterListElement& operator=(CharacterListElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterListElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterListElement* internal_default_instance() {
    return reinterpret_cast<const CharacterListElement*>(
               &_CharacterListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CharacterListElement& a, CharacterListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterListElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterListElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterListElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterListElement& from) {
    CharacterListElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterListElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CharacterListElement";
  }
  protected:
  explicit CharacterListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kEquippedItemFieldNumber = 2,
    kSlotFieldNumber = 3,
  };
  // .Protocol.ObjectInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::Protocol::ObjectInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_playerinfo();
  ::Protocol::ObjectInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_playerinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::Protocol::ObjectInfo* playerinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_playerinfo();

  // .Protocol.ItemInfo EquippedItem = 2;
  bool has_equippeditem() const;
  private:
  bool _internal_has_equippeditem() const;
  public:
  void clear_equippeditem();
  const ::Protocol::ItemInfo& equippeditem() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_equippeditem();
  ::Protocol::ItemInfo* mutable_equippeditem();
  void set_allocated_equippeditem(::Protocol::ItemInfo* equippeditem);
  private:
  const ::Protocol::ItemInfo& _internal_equippeditem() const;
  ::Protocol::ItemInfo* _internal_mutable_equippeditem();
  public:
  void unsafe_arena_set_allocated_equippeditem(
      ::Protocol::ItemInfo* equippeditem);
  ::Protocol::ItemInfo* unsafe_arena_release_equippeditem();

  // int32 Slot = 3;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CharacterListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* playerinfo_;
    ::Protocol::ItemInfo* equippeditem_;
    int32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Test

// uint64 id = 1;
inline void S_Test::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t S_Test::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t S_Test::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Test.id)
  return _internal_id();
}
inline void S_Test::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void S_Test::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Test.id)
}

// uint32 hp = 2;
inline void S_Test::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t S_Test::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t S_Test::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Test.hp)
  return _internal_hp();
}
inline void S_Test::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_Test::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Test.hp)
}

// uint32 attack = 3;
inline void S_Test::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t S_Test::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t S_Test::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Test.attack)
  return _internal_attack();
}
inline void S_Test::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void S_Test::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Test.attack)
}

// -------------------------------------------------------------------

// S_EnterRoom

// -------------------------------------------------------------------

// C_EnterRoom

// int32 CharacterId = 1;
inline void C_EnterRoom::clear_characterid() {
  _impl_.characterid_ = 0;
}
inline int32_t C_EnterRoom::_internal_characterid() const {
  return _impl_.characterid_;
}
inline int32_t C_EnterRoom::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EnterRoom.CharacterId)
  return _internal_characterid();
}
inline void C_EnterRoom::_internal_set_characterid(int32_t value) {
  
  _impl_.characterid_ = value;
}
inline void C_EnterRoom::set_characterid(int32_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EnterRoom.CharacterId)
}

// -------------------------------------------------------------------

// S_Move

// .Protocol.ObjectInfo info = 1;
inline bool S_Move::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_Move::has_info() const {
  return _internal_has_info();
}
inline void S_Move::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_Move::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Move::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Move.info)
  return _internal_info();
}
inline void S_Move::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Move.info)
}
inline ::Protocol::ObjectInfo* S_Move::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Move::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Move.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Move::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_Move::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Move.info)
  return _msg;
}
inline void S_Move::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Move.info)
}

// -------------------------------------------------------------------

// C_Move

// .Protocol.ObjectInfo info = 1;
inline bool C_Move::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Move::has_info() const {
  return _internal_has_info();
}
inline void C_Move::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_Move::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Move::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Move.info)
  return _internal_info();
}
inline void C_Move::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Move.info)
}
inline ::Protocol::ObjectInfo* C_Move::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Move::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Move.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Move::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Move::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Move.info)
  return _msg;
}
inline void C_Move::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Move.info)
}

// -------------------------------------------------------------------

// S_Disconnect

// .Protocol.ObjectInfo info = 1;
inline bool S_Disconnect::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_Disconnect::has_info() const {
  return _internal_has_info();
}
inline void S_Disconnect::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_Disconnect::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Disconnect::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Disconnect.info)
  return _internal_info();
}
inline void S_Disconnect::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Disconnect.info)
}
inline ::Protocol::ObjectInfo* S_Disconnect::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Disconnect::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Disconnect.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Disconnect::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_Disconnect::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Disconnect.info)
  return _msg;
}
inline void S_Disconnect::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Disconnect.info)
}

// -------------------------------------------------------------------

// C_Disconnect

// .Protocol.ObjectInfo info = 1;
inline bool C_Disconnect::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Disconnect::has_info() const {
  return _internal_has_info();
}
inline void C_Disconnect::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_Disconnect::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Disconnect::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Disconnect.info)
  return _internal_info();
}
inline void C_Disconnect::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Disconnect.info)
}
inline ::Protocol::ObjectInfo* C_Disconnect::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Disconnect::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Disconnect.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Disconnect::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Disconnect::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Disconnect.info)
  return _msg;
}
inline void C_Disconnect::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Disconnect.info)
}

// -------------------------------------------------------------------

// S_SpawnMyPlayer

// .Protocol.ObjectInfo info = 1;
inline bool S_SpawnMyPlayer::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_SpawnMyPlayer::has_info() const {
  return _internal_has_info();
}
inline void S_SpawnMyPlayer::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_SpawnMyPlayer::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_SpawnMyPlayer::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SpawnMyPlayer.info)
  return _internal_info();
}
inline void S_SpawnMyPlayer::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SpawnMyPlayer.info)
}
inline ::Protocol::ObjectInfo* S_SpawnMyPlayer::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_SpawnMyPlayer::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_SpawnMyPlayer.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_SpawnMyPlayer::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_SpawnMyPlayer::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SpawnMyPlayer.info)
  return _msg;
}
inline void S_SpawnMyPlayer::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SpawnMyPlayer.info)
}

// -------------------------------------------------------------------

// S_AddObjects

// repeated .Protocol.ObjectInfo objects = 1;
inline int S_AddObjects::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int S_AddObjects::objects_size() const {
  return _internal_objects_size();
}
inline void S_AddObjects::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::Protocol::ObjectInfo* S_AddObjects::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_AddObjects.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_AddObjects::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_AddObjects.objects)
  return &_impl_.objects_;
}
inline const ::Protocol::ObjectInfo& S_AddObjects::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_AddObjects::objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddObjects.objects)
  return _internal_objects(index);
}
inline ::Protocol::ObjectInfo* S_AddObjects::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::Protocol::ObjectInfo* S_AddObjects::add_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_AddObjects.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_AddObjects::objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_AddObjects.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// S_Despawn

// repeated .Protocol.ObjectInfo objects = 1;
inline int S_Despawn::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int S_Despawn::objects_size() const {
  return _internal_objects_size();
}
inline void S_Despawn::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::Protocol::ObjectInfo* S_Despawn::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_Despawn.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_Despawn::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_Despawn.objects)
  return &_impl_.objects_;
}
inline const ::Protocol::ObjectInfo& S_Despawn::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_Despawn::objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_Despawn.objects)
  return _internal_objects(index);
}
inline ::Protocol::ObjectInfo* S_Despawn::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::Protocol::ObjectInfo* S_Despawn::add_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_Despawn.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_Despawn::objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_Despawn.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// C_Skill

// .Protocol.ObjectInfo info = 1;
inline bool C_Skill::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Skill::has_info() const {
  return _internal_has_info();
}
inline void C_Skill::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_Skill::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Skill::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Skill.info)
  return _internal_info();
}
inline void C_Skill::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Skill.info)
}
inline ::Protocol::ObjectInfo* C_Skill::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Skill::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Skill.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Skill::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Skill::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Skill.info)
  return _msg;
}
inline void C_Skill::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Skill.info)
}

// int32 skillId = 2;
inline void C_Skill::clear_skillid() {
  _impl_.skillid_ = 0;
}
inline int32_t C_Skill::_internal_skillid() const {
  return _impl_.skillid_;
}
inline int32_t C_Skill::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Skill.skillId)
  return _internal_skillid();
}
inline void C_Skill::_internal_set_skillid(int32_t value) {
  
  _impl_.skillid_ = value;
}
inline void C_Skill::set_skillid(int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Skill.skillId)
}

// int32 AttackIndex = 3;
inline void C_Skill::clear_attackindex() {
  _impl_.attackindex_ = 0;
}
inline int32_t C_Skill::_internal_attackindex() const {
  return _impl_.attackindex_;
}
inline int32_t C_Skill::attackindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Skill.AttackIndex)
  return _internal_attackindex();
}
inline void C_Skill::_internal_set_attackindex(int32_t value) {
  
  _impl_.attackindex_ = value;
}
inline void C_Skill::set_attackindex(int32_t value) {
  _internal_set_attackindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Skill.AttackIndex)
}

// -------------------------------------------------------------------

// S_Skill

// .Protocol.ObjectInfo info = 1;
inline bool S_Skill::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_Skill::has_info() const {
  return _internal_has_info();
}
inline void S_Skill::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_Skill::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Skill::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Skill.info)
  return _internal_info();
}
inline void S_Skill::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Skill.info)
}
inline ::Protocol::ObjectInfo* S_Skill::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Skill::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Skill.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Skill::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_Skill::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Skill.info)
  return _msg;
}
inline void S_Skill::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Skill.info)
}

// int32 skillId = 2;
inline void S_Skill::clear_skillid() {
  _impl_.skillid_ = 0;
}
inline int32_t S_Skill::_internal_skillid() const {
  return _impl_.skillid_;
}
inline int32_t S_Skill::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Skill.skillId)
  return _internal_skillid();
}
inline void S_Skill::_internal_set_skillid(int32_t value) {
  
  _impl_.skillid_ = value;
}
inline void S_Skill::set_skillid(int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Skill.skillId)
}

// int32 AttackIndex = 3;
inline void S_Skill::clear_attackindex() {
  _impl_.attackindex_ = 0;
}
inline int32_t S_Skill::_internal_attackindex() const {
  return _impl_.attackindex_;
}
inline int32_t S_Skill::attackindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Skill.AttackIndex)
  return _internal_attackindex();
}
inline void S_Skill::_internal_set_attackindex(int32_t value) {
  
  _impl_.attackindex_ = value;
}
inline void S_Skill::set_attackindex(int32_t value) {
  _internal_set_attackindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Skill.AttackIndex)
}

// -------------------------------------------------------------------

// C_ChangedHP

// .Protocol.ObjectInfo Target = 1;
inline bool C_ChangedHP::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool C_ChangedHP::has_target() const {
  return _internal_has_target();
}
inline void C_ChangedHP::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_ChangedHP::_internal_target() const {
  const ::Protocol::ObjectInfo* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_ChangedHP::target() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ChangedHP.Target)
  return _internal_target();
}
inline void C_ChangedHP::unsafe_arena_set_allocated_target(
    ::Protocol::ObjectInfo* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ChangedHP.Target)
}
inline ::Protocol::ObjectInfo* C_ChangedHP::release_target() {
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:Protocol.C_ChangedHP.Target)
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::mutable_target() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ChangedHP.Target)
  return _msg;
}
inline void C_ChangedHP::set_allocated_target(::Protocol::ObjectInfo* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ChangedHP.Target)
}

// .Protocol.ObjectInfo DamageCauser = 2;
inline bool C_ChangedHP::_internal_has_damagecauser() const {
  return this != internal_default_instance() && _impl_.damagecauser_ != nullptr;
}
inline bool C_ChangedHP::has_damagecauser() const {
  return _internal_has_damagecauser();
}
inline void C_ChangedHP::clear_damagecauser() {
  if (GetArenaForAllocation() == nullptr && _impl_.damagecauser_ != nullptr) {
    delete _impl_.damagecauser_;
  }
  _impl_.damagecauser_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_ChangedHP::_internal_damagecauser() const {
  const ::Protocol::ObjectInfo* p = _impl_.damagecauser_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_ChangedHP::damagecauser() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ChangedHP.DamageCauser)
  return _internal_damagecauser();
}
inline void C_ChangedHP::unsafe_arena_set_allocated_damagecauser(
    ::Protocol::ObjectInfo* damagecauser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damagecauser_);
  }
  _impl_.damagecauser_ = damagecauser;
  if (damagecauser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ChangedHP.DamageCauser)
}
inline ::Protocol::ObjectInfo* C_ChangedHP::release_damagecauser() {
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::unsafe_arena_release_damagecauser() {
  // @@protoc_insertion_point(field_release:Protocol.C_ChangedHP.DamageCauser)
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::_internal_mutable_damagecauser() {
  
  if (_impl_.damagecauser_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.damagecauser_ = p;
  }
  return _impl_.damagecauser_;
}
inline ::Protocol::ObjectInfo* C_ChangedHP::mutable_damagecauser() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_damagecauser();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ChangedHP.DamageCauser)
  return _msg;
}
inline void C_ChangedHP::set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.damagecauser_;
  }
  if (damagecauser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(damagecauser);
    if (message_arena != submessage_arena) {
      damagecauser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damagecauser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.damagecauser_ = damagecauser;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ChangedHP.DamageCauser)
}

// int32 DamageAmount = 3;
inline void C_ChangedHP::clear_damageamount() {
  _impl_.damageamount_ = 0;
}
inline int32_t C_ChangedHP::_internal_damageamount() const {
  return _impl_.damageamount_;
}
inline int32_t C_ChangedHP::damageamount() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ChangedHP.DamageAmount)
  return _internal_damageamount();
}
inline void C_ChangedHP::_internal_set_damageamount(int32_t value) {
  
  _impl_.damageamount_ = value;
}
inline void C_ChangedHP::set_damageamount(int32_t value) {
  _internal_set_damageamount(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ChangedHP.DamageAmount)
}

// -------------------------------------------------------------------

// S_ChangedHP

// .Protocol.ObjectInfo Target = 1;
inline bool S_ChangedHP::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool S_ChangedHP::has_target() const {
  return _internal_has_target();
}
inline void S_ChangedHP::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_ChangedHP::_internal_target() const {
  const ::Protocol::ObjectInfo* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ChangedHP::target() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ChangedHP.Target)
  return _internal_target();
}
inline void S_ChangedHP::unsafe_arena_set_allocated_target(
    ::Protocol::ObjectInfo* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ChangedHP.Target)
}
inline ::Protocol::ObjectInfo* S_ChangedHP::release_target() {
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:Protocol.S_ChangedHP.Target)
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::mutable_target() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ChangedHP.Target)
  return _msg;
}
inline void S_ChangedHP::set_allocated_target(::Protocol::ObjectInfo* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ChangedHP.Target)
}

// .Protocol.ObjectInfo DamageCauser = 2;
inline bool S_ChangedHP::_internal_has_damagecauser() const {
  return this != internal_default_instance() && _impl_.damagecauser_ != nullptr;
}
inline bool S_ChangedHP::has_damagecauser() const {
  return _internal_has_damagecauser();
}
inline void S_ChangedHP::clear_damagecauser() {
  if (GetArenaForAllocation() == nullptr && _impl_.damagecauser_ != nullptr) {
    delete _impl_.damagecauser_;
  }
  _impl_.damagecauser_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_ChangedHP::_internal_damagecauser() const {
  const ::Protocol::ObjectInfo* p = _impl_.damagecauser_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ChangedHP::damagecauser() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ChangedHP.DamageCauser)
  return _internal_damagecauser();
}
inline void S_ChangedHP::unsafe_arena_set_allocated_damagecauser(
    ::Protocol::ObjectInfo* damagecauser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damagecauser_);
  }
  _impl_.damagecauser_ = damagecauser;
  if (damagecauser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ChangedHP.DamageCauser)
}
inline ::Protocol::ObjectInfo* S_ChangedHP::release_damagecauser() {
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::unsafe_arena_release_damagecauser() {
  // @@protoc_insertion_point(field_release:Protocol.S_ChangedHP.DamageCauser)
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::_internal_mutable_damagecauser() {
  
  if (_impl_.damagecauser_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.damagecauser_ = p;
  }
  return _impl_.damagecauser_;
}
inline ::Protocol::ObjectInfo* S_ChangedHP::mutable_damagecauser() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_damagecauser();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ChangedHP.DamageCauser)
  return _msg;
}
inline void S_ChangedHP::set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.damagecauser_;
  }
  if (damagecauser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(damagecauser);
    if (message_arena != submessage_arena) {
      damagecauser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damagecauser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.damagecauser_ = damagecauser;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ChangedHP.DamageCauser)
}

// int32 DamageAmount = 3;
inline void S_ChangedHP::clear_damageamount() {
  _impl_.damageamount_ = 0;
}
inline int32_t S_ChangedHP::_internal_damageamount() const {
  return _impl_.damageamount_;
}
inline int32_t S_ChangedHP::damageamount() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ChangedHP.DamageAmount)
  return _internal_damageamount();
}
inline void S_ChangedHP::_internal_set_damageamount(int32_t value) {
  
  _impl_.damageamount_ = value;
}
inline void S_ChangedHP::set_damageamount(int32_t value) {
  _internal_set_damageamount(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ChangedHP.DamageAmount)
}

// -------------------------------------------------------------------

// S_Connect

// string Info = 1;
inline void S_Connect::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& S_Connect::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Connect.Info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Connect::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Connect.Info)
}
inline std::string* S_Connect::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Connect.Info)
  return _s;
}
inline const std::string& S_Connect::_internal_info() const {
  return _impl_.info_.Get();
}
inline void S_Connect::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Connect::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Connect::release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Connect.Info)
  return _impl_.info_.Release();
}
inline void S_Connect::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Connect.Info)
}

// -------------------------------------------------------------------

// C_TryLogin

// string Id = 1;
inline void C_TryLogin::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C_TryLogin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_TryLogin.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_TryLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_TryLogin.Id)
}
inline std::string* C_TryLogin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_TryLogin.Id)
  return _s;
}
inline const std::string& C_TryLogin::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C_TryLogin::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_TryLogin::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_TryLogin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_TryLogin.Id)
  return _impl_.id_.Release();
}
inline void C_TryLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_TryLogin.Id)
}

// string Password = 2;
inline void C_TryLogin::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C_TryLogin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_TryLogin.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_TryLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_TryLogin.Password)
}
inline std::string* C_TryLogin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C_TryLogin.Password)
  return _s;
}
inline const std::string& C_TryLogin::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C_TryLogin::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C_TryLogin::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C_TryLogin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_TryLogin.Password)
  return _impl_.password_.Release();
}
inline void C_TryLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_TryLogin.Password)
}

// -------------------------------------------------------------------

// S_SuccessLogin

// string Info = 1;
inline void S_SuccessLogin::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& S_SuccessLogin::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SuccessLogin.Info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SuccessLogin::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SuccessLogin.Info)
}
inline std::string* S_SuccessLogin::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SuccessLogin.Info)
  return _s;
}
inline const std::string& S_SuccessLogin::_internal_info() const {
  return _impl_.info_.Get();
}
inline void S_SuccessLogin::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* S_SuccessLogin::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* S_SuccessLogin::release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_SuccessLogin.Info)
  return _impl_.info_.Release();
}
inline void S_SuccessLogin::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SuccessLogin.Info)
}

// -------------------------------------------------------------------

// S_FailedLogin

// string Info = 1;
inline void S_FailedLogin::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& S_FailedLogin::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FailedLogin.Info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_FailedLogin::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_FailedLogin.Info)
}
inline std::string* S_FailedLogin::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FailedLogin.Info)
  return _s;
}
inline const std::string& S_FailedLogin::_internal_info() const {
  return _impl_.info_.Get();
}
inline void S_FailedLogin::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* S_FailedLogin::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* S_FailedLogin::release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_FailedLogin.Info)
  return _impl_.info_.Release();
}
inline void S_FailedLogin::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FailedLogin.Info)
}

// -------------------------------------------------------------------

// C_CreateAccount

// string Id = 1;
inline void C_CreateAccount::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C_CreateAccount::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CreateAccount.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CreateAccount::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CreateAccount.Id)
}
inline std::string* C_CreateAccount::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CreateAccount.Id)
  return _s;
}
inline const std::string& C_CreateAccount::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C_CreateAccount::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CreateAccount::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CreateAccount::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_CreateAccount.Id)
  return _impl_.id_.Release();
}
inline void C_CreateAccount::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CreateAccount.Id)
}

// string Password = 2;
inline void C_CreateAccount::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C_CreateAccount::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CreateAccount.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CreateAccount::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CreateAccount.Password)
}
inline std::string* C_CreateAccount::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CreateAccount.Password)
  return _s;
}
inline const std::string& C_CreateAccount::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C_CreateAccount::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CreateAccount::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CreateAccount::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_CreateAccount.Password)
  return _impl_.password_.Release();
}
inline void C_CreateAccount::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CreateAccount.Password)
}

// -------------------------------------------------------------------

// S_CreateAccount

// string Id = 1;
inline void S_CreateAccount::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& S_CreateAccount::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CreateAccount.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CreateAccount::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CreateAccount.Id)
}
inline std::string* S_CreateAccount::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CreateAccount.Id)
  return _s;
}
inline const std::string& S_CreateAccount::_internal_id() const {
  return _impl_.id_.Get();
}
inline void S_CreateAccount::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CreateAccount::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CreateAccount::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_CreateAccount.Id)
  return _impl_.id_.Release();
}
inline void S_CreateAccount::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CreateAccount.Id)
}

// string Password = 2;
inline void S_CreateAccount::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& S_CreateAccount::password() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CreateAccount.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CreateAccount::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CreateAccount.Password)
}
inline std::string* S_CreateAccount::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CreateAccount.Password)
  return _s;
}
inline const std::string& S_CreateAccount::_internal_password() const {
  return _impl_.password_.Get();
}
inline void S_CreateAccount::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CreateAccount::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CreateAccount::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.S_CreateAccount.Password)
  return _impl_.password_.Release();
}
inline void S_CreateAccount::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CreateAccount.Password)
}

// int32 result = 3;
inline void S_CreateAccount::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t S_CreateAccount::_internal_result() const {
  return _impl_.result_;
}
inline int32_t S_CreateAccount::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CreateAccount.result)
  return _internal_result();
}
inline void S_CreateAccount::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void S_CreateAccount::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CreateAccount.result)
}

// string msg = 4;
inline void S_CreateAccount::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CreateAccount::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CreateAccount.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CreateAccount::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CreateAccount.msg)
}
inline std::string* S_CreateAccount::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CreateAccount.msg)
  return _s;
}
inline const std::string& S_CreateAccount::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_CreateAccount::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CreateAccount::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CreateAccount::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CreateAccount.msg)
  return _impl_.msg_.Release();
}
inline void S_CreateAccount::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CreateAccount.msg)
}

// -------------------------------------------------------------------

// C_Chat

// int32 Id = 1;
inline void C_Chat::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t C_Chat::_internal_id() const {
  return _impl_.id_;
}
inline int32_t C_Chat::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Chat.Id)
  return _internal_id();
}
inline void C_Chat::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void C_Chat::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Chat.Id)
}

// string msg = 2;
inline void C_Chat::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_Chat::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Chat.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Chat::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Chat.msg)
}
inline std::string* C_Chat::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Chat.msg)
  return _s;
}
inline const std::string& C_Chat::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_Chat::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Chat::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Chat::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_Chat.msg)
  return _impl_.msg_.Release();
}
inline void C_Chat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Chat.msg)
}

// -------------------------------------------------------------------

// S_Chat

// int32 Id = 1;
inline void S_Chat::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_Chat::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_Chat::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Chat.Id)
  return _internal_id();
}
inline void S_Chat::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_Chat::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Chat.Id)
}

// string Name = 2;
inline void S_Chat::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& S_Chat::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Chat.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Chat::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Chat.Name)
}
inline std::string* S_Chat::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Chat.Name)
  return _s;
}
inline const std::string& S_Chat::_internal_name() const {
  return _impl_.name_.Get();
}
inline void S_Chat::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Chat::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Chat::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_Chat.Name)
  return _impl_.name_.Release();
}
inline void S_Chat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Chat.Name)
}

// string msg = 3;
inline void S_Chat::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_Chat::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Chat.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Chat::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Chat.msg)
}
inline std::string* S_Chat::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Chat.msg)
  return _s;
}
inline const std::string& S_Chat::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_Chat::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Chat::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Chat::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_Chat.msg)
  return _impl_.msg_.Release();
}
inline void S_Chat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Chat.msg)
}

// -------------------------------------------------------------------

// S_UpdateMonster

// .Protocol.ObjectInfo info = 1;
inline bool S_UpdateMonster::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_UpdateMonster::has_info() const {
  return _internal_has_info();
}
inline void S_UpdateMonster::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_UpdateMonster::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_UpdateMonster::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UpdateMonster.info)
  return _internal_info();
}
inline void S_UpdateMonster::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_UpdateMonster.info)
}
inline ::Protocol::ObjectInfo* S_UpdateMonster::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_UpdateMonster::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_UpdateMonster.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_UpdateMonster::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_UpdateMonster::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_UpdateMonster.info)
  return _msg;
}
inline void S_UpdateMonster::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_UpdateMonster.info)
}

// -------------------------------------------------------------------

// C_Die

// .Protocol.ObjectInfo Target = 1;
inline bool C_Die::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool C_Die::has_target() const {
  return _internal_has_target();
}
inline void C_Die::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_Die::_internal_target() const {
  const ::Protocol::ObjectInfo* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Die::target() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Die.Target)
  return _internal_target();
}
inline void C_Die::unsafe_arena_set_allocated_target(
    ::Protocol::ObjectInfo* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Die.Target)
}
inline ::Protocol::ObjectInfo* C_Die::release_target() {
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Die::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:Protocol.C_Die.Target)
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Die::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::Protocol::ObjectInfo* C_Die::mutable_target() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Die.Target)
  return _msg;
}
inline void C_Die::set_allocated_target(::Protocol::ObjectInfo* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Die.Target)
}

// .Protocol.ObjectInfo DamageCauser = 2;
inline bool C_Die::_internal_has_damagecauser() const {
  return this != internal_default_instance() && _impl_.damagecauser_ != nullptr;
}
inline bool C_Die::has_damagecauser() const {
  return _internal_has_damagecauser();
}
inline void C_Die::clear_damagecauser() {
  if (GetArenaForAllocation() == nullptr && _impl_.damagecauser_ != nullptr) {
    delete _impl_.damagecauser_;
  }
  _impl_.damagecauser_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_Die::_internal_damagecauser() const {
  const ::Protocol::ObjectInfo* p = _impl_.damagecauser_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Die::damagecauser() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Die.DamageCauser)
  return _internal_damagecauser();
}
inline void C_Die::unsafe_arena_set_allocated_damagecauser(
    ::Protocol::ObjectInfo* damagecauser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damagecauser_);
  }
  _impl_.damagecauser_ = damagecauser;
  if (damagecauser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Die.DamageCauser)
}
inline ::Protocol::ObjectInfo* C_Die::release_damagecauser() {
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Die::unsafe_arena_release_damagecauser() {
  // @@protoc_insertion_point(field_release:Protocol.C_Die.DamageCauser)
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Die::_internal_mutable_damagecauser() {
  
  if (_impl_.damagecauser_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.damagecauser_ = p;
  }
  return _impl_.damagecauser_;
}
inline ::Protocol::ObjectInfo* C_Die::mutable_damagecauser() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_damagecauser();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Die.DamageCauser)
  return _msg;
}
inline void C_Die::set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.damagecauser_;
  }
  if (damagecauser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(damagecauser);
    if (message_arena != submessage_arena) {
      damagecauser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damagecauser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.damagecauser_ = damagecauser;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Die.DamageCauser)
}

// -------------------------------------------------------------------

// S_Die

// .Protocol.ObjectInfo Target = 1;
inline bool S_Die::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool S_Die::has_target() const {
  return _internal_has_target();
}
inline void S_Die::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_Die::_internal_target() const {
  const ::Protocol::ObjectInfo* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Die::target() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Die.Target)
  return _internal_target();
}
inline void S_Die::unsafe_arena_set_allocated_target(
    ::Protocol::ObjectInfo* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Die.Target)
}
inline ::Protocol::ObjectInfo* S_Die::release_target() {
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Die::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:Protocol.S_Die.Target)
  
  ::Protocol::ObjectInfo* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Die::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::Protocol::ObjectInfo* S_Die::mutable_target() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Die.Target)
  return _msg;
}
inline void S_Die::set_allocated_target(::Protocol::ObjectInfo* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Die.Target)
}

// .Protocol.ObjectInfo DamageCauser = 2;
inline bool S_Die::_internal_has_damagecauser() const {
  return this != internal_default_instance() && _impl_.damagecauser_ != nullptr;
}
inline bool S_Die::has_damagecauser() const {
  return _internal_has_damagecauser();
}
inline void S_Die::clear_damagecauser() {
  if (GetArenaForAllocation() == nullptr && _impl_.damagecauser_ != nullptr) {
    delete _impl_.damagecauser_;
  }
  _impl_.damagecauser_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_Die::_internal_damagecauser() const {
  const ::Protocol::ObjectInfo* p = _impl_.damagecauser_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Die::damagecauser() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Die.DamageCauser)
  return _internal_damagecauser();
}
inline void S_Die::unsafe_arena_set_allocated_damagecauser(
    ::Protocol::ObjectInfo* damagecauser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damagecauser_);
  }
  _impl_.damagecauser_ = damagecauser;
  if (damagecauser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Die.DamageCauser)
}
inline ::Protocol::ObjectInfo* S_Die::release_damagecauser() {
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Die::unsafe_arena_release_damagecauser() {
  // @@protoc_insertion_point(field_release:Protocol.S_Die.DamageCauser)
  
  ::Protocol::ObjectInfo* temp = _impl_.damagecauser_;
  _impl_.damagecauser_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Die::_internal_mutable_damagecauser() {
  
  if (_impl_.damagecauser_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.damagecauser_ = p;
  }
  return _impl_.damagecauser_;
}
inline ::Protocol::ObjectInfo* S_Die::mutable_damagecauser() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_damagecauser();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Die.DamageCauser)
  return _msg;
}
inline void S_Die::set_allocated_damagecauser(::Protocol::ObjectInfo* damagecauser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.damagecauser_;
  }
  if (damagecauser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(damagecauser);
    if (message_arena != submessage_arena) {
      damagecauser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damagecauser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.damagecauser_ = damagecauser;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Die.DamageCauser)
}

// -------------------------------------------------------------------

// S_DropItem

// .Protocol.ItemInfo ItemInfo = 1;
inline bool S_DropItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool S_DropItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void S_DropItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& S_DropItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& S_DropItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DropItem.ItemInfo)
  return _internal_iteminfo();
}
inline void S_DropItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DropItem.ItemInfo)
}
inline ::Protocol::ItemInfo* S_DropItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* S_DropItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_DropItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* S_DropItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* S_DropItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_DropItem.ItemInfo)
  return _msg;
}
inline void S_DropItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DropItem.ItemInfo)
}

// int32 Count = 2;
inline void S_DropItem::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t S_DropItem::_internal_count() const {
  return _impl_.count_;
}
inline int32_t S_DropItem::count() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DropItem.Count)
  return _internal_count();
}
inline void S_DropItem::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void S_DropItem::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DropItem.Count)
}

// -------------------------------------------------------------------

// C_PickUpItem

// .Protocol.ObjectInfo Info = 1;
inline bool C_PickUpItem::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_PickUpItem::has_info() const {
  return _internal_has_info();
}
inline void C_PickUpItem::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_PickUpItem::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_PickUpItem::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PickUpItem.Info)
  return _internal_info();
}
inline void C_PickUpItem::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PickUpItem.Info)
}
inline ::Protocol::ObjectInfo* C_PickUpItem::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_PickUpItem.Info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PickUpItem.Info)
  return _msg;
}
inline void C_PickUpItem::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PickUpItem.Info)
}

// .Protocol.ObjectInfo PickItem = 2;
inline bool C_PickUpItem::_internal_has_pickitem() const {
  return this != internal_default_instance() && _impl_.pickitem_ != nullptr;
}
inline bool C_PickUpItem::has_pickitem() const {
  return _internal_has_pickitem();
}
inline void C_PickUpItem::clear_pickitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.pickitem_ != nullptr) {
    delete _impl_.pickitem_;
  }
  _impl_.pickitem_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_PickUpItem::_internal_pickitem() const {
  const ::Protocol::ObjectInfo* p = _impl_.pickitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_PickUpItem::pickitem() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PickUpItem.PickItem)
  return _internal_pickitem();
}
inline void C_PickUpItem::unsafe_arena_set_allocated_pickitem(
    ::Protocol::ObjectInfo* pickitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pickitem_);
  }
  _impl_.pickitem_ = pickitem;
  if (pickitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PickUpItem.PickItem)
}
inline ::Protocol::ObjectInfo* C_PickUpItem::release_pickitem() {
  
  ::Protocol::ObjectInfo* temp = _impl_.pickitem_;
  _impl_.pickitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::unsafe_arena_release_pickitem() {
  // @@protoc_insertion_point(field_release:Protocol.C_PickUpItem.PickItem)
  
  ::Protocol::ObjectInfo* temp = _impl_.pickitem_;
  _impl_.pickitem_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::_internal_mutable_pickitem() {
  
  if (_impl_.pickitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.pickitem_ = p;
  }
  return _impl_.pickitem_;
}
inline ::Protocol::ObjectInfo* C_PickUpItem::mutable_pickitem() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_pickitem();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PickUpItem.PickItem)
  return _msg;
}
inline void C_PickUpItem::set_allocated_pickitem(::Protocol::ObjectInfo* pickitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pickitem_;
  }
  if (pickitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pickitem);
    if (message_arena != submessage_arena) {
      pickitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pickitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pickitem_ = pickitem;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PickUpItem.PickItem)
}

// -------------------------------------------------------------------

// S_PickUpItem

// .Protocol.ObjectInfo Info = 1;
inline bool S_PickUpItem::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_PickUpItem::has_info() const {
  return _internal_has_info();
}
inline void S_PickUpItem::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_PickUpItem::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_PickUpItem::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PickUpItem.Info)
  return _internal_info();
}
inline void S_PickUpItem::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PickUpItem.Info)
}
inline ::Protocol::ObjectInfo* S_PickUpItem::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_PickUpItem.Info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PickUpItem.Info)
  return _msg;
}
inline void S_PickUpItem::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PickUpItem.Info)
}

// .Protocol.ObjectInfo PickItem = 2;
inline bool S_PickUpItem::_internal_has_pickitem() const {
  return this != internal_default_instance() && _impl_.pickitem_ != nullptr;
}
inline bool S_PickUpItem::has_pickitem() const {
  return _internal_has_pickitem();
}
inline void S_PickUpItem::clear_pickitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.pickitem_ != nullptr) {
    delete _impl_.pickitem_;
  }
  _impl_.pickitem_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_PickUpItem::_internal_pickitem() const {
  const ::Protocol::ObjectInfo* p = _impl_.pickitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_PickUpItem::pickitem() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PickUpItem.PickItem)
  return _internal_pickitem();
}
inline void S_PickUpItem::unsafe_arena_set_allocated_pickitem(
    ::Protocol::ObjectInfo* pickitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pickitem_);
  }
  _impl_.pickitem_ = pickitem;
  if (pickitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PickUpItem.PickItem)
}
inline ::Protocol::ObjectInfo* S_PickUpItem::release_pickitem() {
  
  ::Protocol::ObjectInfo* temp = _impl_.pickitem_;
  _impl_.pickitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::unsafe_arena_release_pickitem() {
  // @@protoc_insertion_point(field_release:Protocol.S_PickUpItem.PickItem)
  
  ::Protocol::ObjectInfo* temp = _impl_.pickitem_;
  _impl_.pickitem_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::_internal_mutable_pickitem() {
  
  if (_impl_.pickitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.pickitem_ = p;
  }
  return _impl_.pickitem_;
}
inline ::Protocol::ObjectInfo* S_PickUpItem::mutable_pickitem() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_pickitem();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PickUpItem.PickItem)
  return _msg;
}
inline void S_PickUpItem::set_allocated_pickitem(::Protocol::ObjectInfo* pickitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pickitem_;
  }
  if (pickitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pickitem);
    if (message_arena != submessage_arena) {
      pickitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pickitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pickitem_ = pickitem;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PickUpItem.PickItem)
}

// .Protocol.ItemInfo ItemInfo = 3;
inline bool S_PickUpItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool S_PickUpItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void S_PickUpItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& S_PickUpItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& S_PickUpItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PickUpItem.ItemInfo)
  return _internal_iteminfo();
}
inline void S_PickUpItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PickUpItem.ItemInfo)
}
inline ::Protocol::ItemInfo* S_PickUpItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* S_PickUpItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_PickUpItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* S_PickUpItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* S_PickUpItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PickUpItem.ItemInfo)
  return _msg;
}
inline void S_PickUpItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PickUpItem.ItemInfo)
}

// -------------------------------------------------------------------

// C_MonsterMove

// .Protocol.ObjectInfo info = 1;
inline bool C_MonsterMove::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_MonsterMove::has_info() const {
  return _internal_has_info();
}
inline void C_MonsterMove::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_MonsterMove::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_MonsterMove::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MonsterMove.info)
  return _internal_info();
}
inline void C_MonsterMove::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MonsterMove.info)
}
inline ::Protocol::ObjectInfo* C_MonsterMove::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_MonsterMove::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_MonsterMove.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_MonsterMove::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_MonsterMove::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MonsterMove.info)
  return _msg;
}
inline void C_MonsterMove::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MonsterMove.info)
}

// -------------------------------------------------------------------

// S_UpdateInfo

// .Protocol.ObjectInfo info = 1;
inline bool S_UpdateInfo::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_UpdateInfo::has_info() const {
  return _internal_has_info();
}
inline void S_UpdateInfo::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_UpdateInfo::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_UpdateInfo::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UpdateInfo.info)
  return _internal_info();
}
inline void S_UpdateInfo::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_UpdateInfo.info)
}
inline ::Protocol::ObjectInfo* S_UpdateInfo::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_UpdateInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_UpdateInfo.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_UpdateInfo::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_UpdateInfo::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_UpdateInfo.info)
  return _msg;
}
inline void S_UpdateInfo::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_UpdateInfo.info)
}

// -------------------------------------------------------------------

// C_AddToInventory

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool C_AddToInventory::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool C_AddToInventory::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void C_AddToInventory::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_AddToInventory::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_AddToInventory::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AddToInventory.PlayerInfo)
  return _internal_playerinfo();
}
inline void C_AddToInventory::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_AddToInventory.PlayerInfo)
}
inline ::Protocol::ObjectInfo* C_AddToInventory::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_AddToInventory.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_AddToInventory.PlayerInfo)
  return _msg;
}
inline void C_AddToInventory::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_AddToInventory.PlayerInfo)
}

// .Protocol.ObjectInfo ItemInfo = 2;
inline bool C_AddToInventory::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool C_AddToInventory::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void C_AddToInventory::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_AddToInventory::_internal_iteminfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_AddToInventory::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AddToInventory.ItemInfo)
  return _internal_iteminfo();
}
inline void C_AddToInventory::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ObjectInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_AddToInventory.ItemInfo)
}
inline ::Protocol::ObjectInfo* C_AddToInventory::release_iteminfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_AddToInventory.ItemInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ObjectInfo* C_AddToInventory::mutable_iteminfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_AddToInventory.ItemInfo)
  return _msg;
}
inline void C_AddToInventory::set_allocated_iteminfo(::Protocol::ObjectInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_AddToInventory.ItemInfo)
}

// -------------------------------------------------------------------

// S_AddToInventory

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool S_AddToInventory::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool S_AddToInventory::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void S_AddToInventory::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_AddToInventory::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_AddToInventory::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddToInventory.PlayerInfo)
  return _internal_playerinfo();
}
inline void S_AddToInventory::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_AddToInventory.PlayerInfo)
}
inline ::Protocol::ObjectInfo* S_AddToInventory::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_AddToInventory::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_AddToInventory.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_AddToInventory::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* S_AddToInventory::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_AddToInventory.PlayerInfo)
  return _msg;
}
inline void S_AddToInventory::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_AddToInventory.PlayerInfo)
}

// repeated .Protocol.ItemInfo Items = 2;
inline int S_AddToInventory::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_AddToInventory::items_size() const {
  return _internal_items_size();
}
inline void S_AddToInventory::clear_items() {
  _impl_.items_.Clear();
}
inline ::Protocol::ItemInfo* S_AddToInventory::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_AddToInventory.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
S_AddToInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_AddToInventory.Items)
  return &_impl_.items_;
}
inline const ::Protocol::ItemInfo& S_AddToInventory::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::ItemInfo& S_AddToInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddToInventory.Items)
  return _internal_items(index);
}
inline ::Protocol::ItemInfo* S_AddToInventory::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::ItemInfo* S_AddToInventory::add_items() {
  ::Protocol::ItemInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_AddToInventory.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
S_AddToInventory::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_AddToInventory.Items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_EquippedItem

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool C_EquippedItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool C_EquippedItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void C_EquippedItem::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_EquippedItem::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_EquippedItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EquippedItem.PlayerInfo)
  return _internal_playerinfo();
}
inline void C_EquippedItem::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_EquippedItem.PlayerInfo)
}
inline ::Protocol::ObjectInfo* C_EquippedItem::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_EquippedItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_EquippedItem.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_EquippedItem::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* C_EquippedItem::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_EquippedItem.PlayerInfo)
  return _msg;
}
inline void C_EquippedItem::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EquippedItem.PlayerInfo)
}

// .Protocol.ItemInfo ItemInfo = 2;
inline bool C_EquippedItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool C_EquippedItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void C_EquippedItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& C_EquippedItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& C_EquippedItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EquippedItem.ItemInfo)
  return _internal_iteminfo();
}
inline void C_EquippedItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_EquippedItem.ItemInfo)
}
inline ::Protocol::ItemInfo* C_EquippedItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* C_EquippedItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_EquippedItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* C_EquippedItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* C_EquippedItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_EquippedItem.ItemInfo)
  return _msg;
}
inline void C_EquippedItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EquippedItem.ItemInfo)
}

// -------------------------------------------------------------------

// S_EquippedItem

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool S_EquippedItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool S_EquippedItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void S_EquippedItem::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_EquippedItem::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_EquippedItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EquippedItem.PlayerInfo)
  return _internal_playerinfo();
}
inline void S_EquippedItem::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_EquippedItem.PlayerInfo)
}
inline ::Protocol::ObjectInfo* S_EquippedItem::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_EquippedItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_EquippedItem.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_EquippedItem::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* S_EquippedItem::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_EquippedItem.PlayerInfo)
  return _msg;
}
inline void S_EquippedItem::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EquippedItem.PlayerInfo)
}

// .Protocol.ItemInfo ItemInfo = 2;
inline bool S_EquippedItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool S_EquippedItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void S_EquippedItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& S_EquippedItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& S_EquippedItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EquippedItem.ItemInfo)
  return _internal_iteminfo();
}
inline void S_EquippedItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_EquippedItem.ItemInfo)
}
inline ::Protocol::ItemInfo* S_EquippedItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* S_EquippedItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_EquippedItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* S_EquippedItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* S_EquippedItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_EquippedItem.ItemInfo)
  return _msg;
}
inline void S_EquippedItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EquippedItem.ItemInfo)
}

// -------------------------------------------------------------------

// C_LoadingCharacterList

// -------------------------------------------------------------------

// S_LoadingCharacterList

// repeated .Protocol.CharacterListElement CharacterList = 1;
inline int S_LoadingCharacterList::_internal_characterlist_size() const {
  return _impl_.characterlist_.size();
}
inline int S_LoadingCharacterList::characterlist_size() const {
  return _internal_characterlist_size();
}
inline void S_LoadingCharacterList::clear_characterlist() {
  _impl_.characterlist_.Clear();
}
inline ::Protocol::CharacterListElement* S_LoadingCharacterList::mutable_characterlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LoadingCharacterList.CharacterList)
  return _impl_.characterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::CharacterListElement >*
S_LoadingCharacterList::mutable_characterlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LoadingCharacterList.CharacterList)
  return &_impl_.characterlist_;
}
inline const ::Protocol::CharacterListElement& S_LoadingCharacterList::_internal_characterlist(int index) const {
  return _impl_.characterlist_.Get(index);
}
inline const ::Protocol::CharacterListElement& S_LoadingCharacterList::characterlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LoadingCharacterList.CharacterList)
  return _internal_characterlist(index);
}
inline ::Protocol::CharacterListElement* S_LoadingCharacterList::_internal_add_characterlist() {
  return _impl_.characterlist_.Add();
}
inline ::Protocol::CharacterListElement* S_LoadingCharacterList::add_characterlist() {
  ::Protocol::CharacterListElement* _add = _internal_add_characterlist();
  // @@protoc_insertion_point(field_add:Protocol.S_LoadingCharacterList.CharacterList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::CharacterListElement >&
S_LoadingCharacterList::characterlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LoadingCharacterList.CharacterList)
  return _impl_.characterlist_;
}

// -------------------------------------------------------------------

// C_CreateCharacter

// int32 TemplatedId = 1;
inline void C_CreateCharacter::clear_templatedid() {
  _impl_.templatedid_ = 0;
}
inline int32_t C_CreateCharacter::_internal_templatedid() const {
  return _impl_.templatedid_;
}
inline int32_t C_CreateCharacter::templatedid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CreateCharacter.TemplatedId)
  return _internal_templatedid();
}
inline void C_CreateCharacter::_internal_set_templatedid(int32_t value) {
  
  _impl_.templatedid_ = value;
}
inline void C_CreateCharacter::set_templatedid(int32_t value) {
  _internal_set_templatedid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CreateCharacter.TemplatedId)
}

// string Name = 2;
inline void C_CreateCharacter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C_CreateCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CreateCharacter.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CreateCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CreateCharacter.Name)
}
inline std::string* C_CreateCharacter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CreateCharacter.Name)
  return _s;
}
inline const std::string& C_CreateCharacter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C_CreateCharacter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CreateCharacter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CreateCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_CreateCharacter.Name)
  return _impl_.name_.Release();
}
inline void C_CreateCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CreateCharacter.Name)
}

// -------------------------------------------------------------------

// S_CreateCharacter

// -------------------------------------------------------------------

// C_DeleteCharacter

// int32 Slot = 1;
inline void C_DeleteCharacter::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t C_DeleteCharacter::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t C_DeleteCharacter::slot() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DeleteCharacter.Slot)
  return _internal_slot();
}
inline void C_DeleteCharacter::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void C_DeleteCharacter::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DeleteCharacter.Slot)
}

// -------------------------------------------------------------------

// S_RefreshInventory

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool S_RefreshInventory::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool S_RefreshInventory::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void S_RefreshInventory::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_RefreshInventory::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_RefreshInventory::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RefreshInventory.PlayerInfo)
  return _internal_playerinfo();
}
inline void S_RefreshInventory::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_RefreshInventory.PlayerInfo)
}
inline ::Protocol::ObjectInfo* S_RefreshInventory::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_RefreshInventory::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_RefreshInventory.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_RefreshInventory::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* S_RefreshInventory::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_RefreshInventory.PlayerInfo)
  return _msg;
}
inline void S_RefreshInventory::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_RefreshInventory.PlayerInfo)
}

// repeated .Protocol.ItemInfo Items = 2;
inline int S_RefreshInventory::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_RefreshInventory::items_size() const {
  return _internal_items_size();
}
inline void S_RefreshInventory::clear_items() {
  _impl_.items_.Clear();
}
inline ::Protocol::ItemInfo* S_RefreshInventory::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_RefreshInventory.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
S_RefreshInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_RefreshInventory.Items)
  return &_impl_.items_;
}
inline const ::Protocol::ItemInfo& S_RefreshInventory::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::ItemInfo& S_RefreshInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_RefreshInventory.Items)
  return _internal_items(index);
}
inline ::Protocol::ItemInfo* S_RefreshInventory::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::ItemInfo* S_RefreshInventory::add_items() {
  ::Protocol::ItemInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_RefreshInventory.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
S_RefreshInventory::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_RefreshInventory.Items)
  return _impl_.items_;
}

// int32 Gold = 3;
inline void S_RefreshInventory::clear_gold() {
  _impl_.gold_ = 0;
}
inline int32_t S_RefreshInventory::_internal_gold() const {
  return _impl_.gold_;
}
inline int32_t S_RefreshInventory::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RefreshInventory.Gold)
  return _internal_gold();
}
inline void S_RefreshInventory::_internal_set_gold(int32_t value) {
  
  _impl_.gold_ = value;
}
inline void S_RefreshInventory::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RefreshInventory.Gold)
}

// -------------------------------------------------------------------

// C_UseItem

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool C_UseItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool C_UseItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void C_UseItem::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& C_UseItem::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_UseItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_UseItem.PlayerInfo)
  return _internal_playerinfo();
}
inline void C_UseItem::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_UseItem.PlayerInfo)
}
inline ::Protocol::ObjectInfo* C_UseItem::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_UseItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_UseItem.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_UseItem::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* C_UseItem::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_UseItem.PlayerInfo)
  return _msg;
}
inline void C_UseItem::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_UseItem.PlayerInfo)
}

// .Protocol.ItemInfo ItemInfo = 2;
inline bool C_UseItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool C_UseItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void C_UseItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& C_UseItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& C_UseItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_UseItem.ItemInfo)
  return _internal_iteminfo();
}
inline void C_UseItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_UseItem.ItemInfo)
}
inline ::Protocol::ItemInfo* C_UseItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* C_UseItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_UseItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* C_UseItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* C_UseItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_UseItem.ItemInfo)
  return _msg;
}
inline void C_UseItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_UseItem.ItemInfo)
}

// -------------------------------------------------------------------

// S_UseItem

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool S_UseItem::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool S_UseItem::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void S_UseItem::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& S_UseItem::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_UseItem::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UseItem.PlayerInfo)
  return _internal_playerinfo();
}
inline void S_UseItem::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_UseItem.PlayerInfo)
}
inline ::Protocol::ObjectInfo* S_UseItem::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_UseItem::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_UseItem.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_UseItem::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* S_UseItem::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_UseItem.PlayerInfo)
  return _msg;
}
inline void S_UseItem::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_UseItem.PlayerInfo)
}

// .Protocol.ItemInfo ItemInfo = 2;
inline bool S_UseItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool S_UseItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void S_UseItem::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
inline const ::Protocol::ItemInfo& S_UseItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& S_UseItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UseItem.ItemInfo)
  return _internal_iteminfo();
}
inline void S_UseItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_UseItem.ItemInfo)
}
inline ::Protocol::ItemInfo* S_UseItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* S_UseItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_UseItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* S_UseItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* S_UseItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_UseItem.ItemInfo)
  return _msg;
}
inline void S_UseItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_UseItem.ItemInfo)
}

// -------------------------------------------------------------------

// C_BuyItem

// int32 ItemTemplatedId = 2;
inline void C_BuyItem::clear_itemtemplatedid() {
  _impl_.itemtemplatedid_ = 0;
}
inline int32_t C_BuyItem::_internal_itemtemplatedid() const {
  return _impl_.itemtemplatedid_;
}
inline int32_t C_BuyItem::itemtemplatedid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BuyItem.ItemTemplatedId)
  return _internal_itemtemplatedid();
}
inline void C_BuyItem::_internal_set_itemtemplatedid(int32_t value) {
  
  _impl_.itemtemplatedid_ = value;
}
inline void C_BuyItem::set_itemtemplatedid(int32_t value) {
  _internal_set_itemtemplatedid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BuyItem.ItemTemplatedId)
}

// -------------------------------------------------------------------

// S_BuyItem

// int32 Result = 1;
inline void S_BuyItem::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t S_BuyItem::_internal_result() const {
  return _impl_.result_;
}
inline int32_t S_BuyItem::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BuyItem.Result)
  return _internal_result();
}
inline void S_BuyItem::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void S_BuyItem::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BuyItem.Result)
}

// -------------------------------------------------------------------

// C_Spanw_Boss

// -------------------------------------------------------------------

// C_GetQuest

// int32 QuestTemplatedId = 1;
inline void C_GetQuest::clear_questtemplatedid() {
  _impl_.questtemplatedid_ = 0;
}
inline int32_t C_GetQuest::_internal_questtemplatedid() const {
  return _impl_.questtemplatedid_;
}
inline int32_t C_GetQuest::questtemplatedid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GetQuest.QuestTemplatedId)
  return _internal_questtemplatedid();
}
inline void C_GetQuest::_internal_set_questtemplatedid(int32_t value) {
  
  _impl_.questtemplatedid_ = value;
}
inline void C_GetQuest::set_questtemplatedid(int32_t value) {
  _internal_set_questtemplatedid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_GetQuest.QuestTemplatedId)
}

// -------------------------------------------------------------------

// S_GetQuest

// int32 QuestTemplatedId = 1;
inline void S_GetQuest::clear_questtemplatedid() {
  _impl_.questtemplatedid_ = 0;
}
inline int32_t S_GetQuest::_internal_questtemplatedid() const {
  return _impl_.questtemplatedid_;
}
inline int32_t S_GetQuest::questtemplatedid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GetQuest.QuestTemplatedId)
  return _internal_questtemplatedid();
}
inline void S_GetQuest::_internal_set_questtemplatedid(int32_t value) {
  
  _impl_.questtemplatedid_ = value;
}
inline void S_GetQuest::set_questtemplatedid(int32_t value) {
  _internal_set_questtemplatedid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GetQuest.QuestTemplatedId)
}

// int32 CurrentProgress = 2;
inline void S_GetQuest::clear_currentprogress() {
  _impl_.currentprogress_ = 0;
}
inline int32_t S_GetQuest::_internal_currentprogress() const {
  return _impl_.currentprogress_;
}
inline int32_t S_GetQuest::currentprogress() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GetQuest.CurrentProgress)
  return _internal_currentprogress();
}
inline void S_GetQuest::_internal_set_currentprogress(int32_t value) {
  
  _impl_.currentprogress_ = value;
}
inline void S_GetQuest::set_currentprogress(int32_t value) {
  _internal_set_currentprogress(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GetQuest.CurrentProgress)
}

// -------------------------------------------------------------------

// C_UpdateQuest

// -------------------------------------------------------------------

// S_UpdateQuest

// int32 QuestTemplatedId = 1;
inline void S_UpdateQuest::clear_questtemplatedid() {
  _impl_.questtemplatedid_ = 0;
}
inline int32_t S_UpdateQuest::_internal_questtemplatedid() const {
  return _impl_.questtemplatedid_;
}
inline int32_t S_UpdateQuest::questtemplatedid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UpdateQuest.QuestTemplatedId)
  return _internal_questtemplatedid();
}
inline void S_UpdateQuest::_internal_set_questtemplatedid(int32_t value) {
  
  _impl_.questtemplatedid_ = value;
}
inline void S_UpdateQuest::set_questtemplatedid(int32_t value) {
  _internal_set_questtemplatedid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_UpdateQuest.QuestTemplatedId)
}

// int32 CurrentProgress = 2;
inline void S_UpdateQuest::clear_currentprogress() {
  _impl_.currentprogress_ = 0;
}
inline int32_t S_UpdateQuest::_internal_currentprogress() const {
  return _impl_.currentprogress_;
}
inline int32_t S_UpdateQuest::currentprogress() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UpdateQuest.CurrentProgress)
  return _internal_currentprogress();
}
inline void S_UpdateQuest::_internal_set_currentprogress(int32_t value) {
  
  _impl_.currentprogress_ = value;
}
inline void S_UpdateQuest::set_currentprogress(int32_t value) {
  _internal_set_currentprogress(value);
  // @@protoc_insertion_point(field_set:Protocol.S_UpdateQuest.CurrentProgress)
}

// -------------------------------------------------------------------

// ObjectInfo

// int32 Id = 1;
inline void ObjectInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ObjectInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.Id)
  return _internal_id();
}
inline void ObjectInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ObjectInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.Id)
}

// string name = 2;
inline void ObjectInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.name)
  return _s;
}
inline const std::string& ObjectInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.name)
  return _impl_.name_.Release();
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.name)
}

// .Protocol.ObjectType type = 3;
inline void ObjectInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_type() const {
  return static_cast< ::Protocol::ObjectType >(_impl_.type_);
}
inline ::Protocol::ObjectType ObjectInfo::type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.type)
  return _internal_type();
}
inline void ObjectInfo::_internal_set_type(::Protocol::ObjectType value) {
  
  _impl_.type_ = value;
}
inline void ObjectInfo::set_type(::Protocol::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.type)
}

// .Protocol.Position position = 4;
inline bool ObjectInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool ObjectInfo::has_position() const {
  return _internal_has_position();
}
inline void ObjectInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Position& ObjectInfo::_internal_position() const {
  const ::Protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Position&>(
      ::Protocol::_Position_default_instance_);
}
inline const ::Protocol::Position& ObjectInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.position)
  return _internal_position();
}
inline void ObjectInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.position)
}
inline ::Protocol::Position* ObjectInfo::release_position() {
  
  ::Protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Position* ObjectInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.position)
  
  ::Protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Position* ObjectInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Position* ObjectInfo::mutable_position() {
  ::Protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.position)
  return _msg;
}
inline void ObjectInfo::set_allocated_position(::Protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.position)
}

// .Protocol.Stat stat = 5;
inline bool ObjectInfo::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool ObjectInfo::has_stat() const {
  return _internal_has_stat();
}
inline void ObjectInfo::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
inline const ::Protocol::Stat& ObjectInfo::_internal_stat() const {
  const ::Protocol::Stat* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Stat&>(
      ::Protocol::_Stat_default_instance_);
}
inline const ::Protocol::Stat& ObjectInfo::stat() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.stat)
  return _internal_stat();
}
inline void ObjectInfo::unsafe_arena_set_allocated_stat(
    ::Protocol::Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.stat)
}
inline ::Protocol::Stat* ObjectInfo::release_stat() {
  
  ::Protocol::Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Stat* ObjectInfo::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.stat)
  
  ::Protocol::Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::Protocol::Stat* ObjectInfo::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Stat>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::Protocol::Stat* ObjectInfo::mutable_stat() {
  ::Protocol::Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.stat)
  return _msg;
}
inline void ObjectInfo::set_allocated_stat(::Protocol::Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.stat)
}

// int32 targetId = 6;
inline void ObjectInfo::clear_targetid() {
  _impl_.targetid_ = 0;
}
inline int32_t ObjectInfo::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int32_t ObjectInfo::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.targetId)
  return _internal_targetid();
}
inline void ObjectInfo::_internal_set_targetid(int32_t value) {
  
  _impl_.targetid_ = value;
}
inline void ObjectInfo::set_targetid(int32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.targetId)
}

// .Protocol.CreatureState State = 7;
inline void ObjectInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::CreatureState ObjectInfo::_internal_state() const {
  return static_cast< ::Protocol::CreatureState >(_impl_.state_);
}
inline ::Protocol::CreatureState ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.State)
  return _internal_state();
}
inline void ObjectInfo::_internal_set_state(::Protocol::CreatureState value) {
  
  _impl_.state_ = value;
}
inline void ObjectInfo::set_state(::Protocol::CreatureState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.State)
}

// int32 templateId = 8;
inline void ObjectInfo::clear_templateid() {
  _impl_.templateid_ = 0;
}
inline int32_t ObjectInfo::_internal_templateid() const {
  return _impl_.templateid_;
}
inline int32_t ObjectInfo::templateid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.templateId)
  return _internal_templateid();
}
inline void ObjectInfo::_internal_set_templateid(int32_t value) {
  
  _impl_.templateid_ = value;
}
inline void ObjectInfo::set_templateid(int32_t value) {
  _internal_set_templateid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.templateId)
}

// -------------------------------------------------------------------

// ItemInfo

// int32 DatabaseId = 1;
inline void ItemInfo::clear_databaseid() {
  _impl_.databaseid_ = 0;
}
inline int32_t ItemInfo::_internal_databaseid() const {
  return _impl_.databaseid_;
}
inline int32_t ItemInfo::databaseid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.DatabaseId)
  return _internal_databaseid();
}
inline void ItemInfo::_internal_set_databaseid(int32_t value) {
  
  _impl_.databaseid_ = value;
}
inline void ItemInfo::set_databaseid(int32_t value) {
  _internal_set_databaseid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.DatabaseId)
}

// int32 templateId = 2;
inline void ItemInfo::clear_templateid() {
  _impl_.templateid_ = 0;
}
inline int32_t ItemInfo::_internal_templateid() const {
  return _impl_.templateid_;
}
inline int32_t ItemInfo::templateid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.templateId)
  return _internal_templateid();
}
inline void ItemInfo::_internal_set_templateid(int32_t value) {
  
  _impl_.templateid_ = value;
}
inline void ItemInfo::set_templateid(int32_t value) {
  _internal_set_templateid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.templateId)
}

// string name = 3;
inline void ItemInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ItemInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ItemInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.name)
}
inline std::string* ItemInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ItemInfo.name)
  return _s;
}
inline const std::string& ItemInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ItemInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ItemInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ItemInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ItemInfo.name)
  return _impl_.name_.Release();
}
inline void ItemInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ItemInfo.name)
}

// int32 damage = 4;
inline void ItemInfo::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t ItemInfo::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t ItemInfo::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.damage)
  return _internal_damage();
}
inline void ItemInfo::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void ItemInfo::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.damage)
}

// int32 Armor = 5;
inline void ItemInfo::clear_armor() {
  _impl_.armor_ = 0;
}
inline int32_t ItemInfo::_internal_armor() const {
  return _impl_.armor_;
}
inline int32_t ItemInfo::armor() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.Armor)
  return _internal_armor();
}
inline void ItemInfo::_internal_set_armor(int32_t value) {
  
  _impl_.armor_ = value;
}
inline void ItemInfo::set_armor(int32_t value) {
  _internal_set_armor(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.Armor)
}

// .Protocol.ItemType itemType = 6;
inline void ItemInfo::clear_itemtype() {
  _impl_.itemtype_ = 0;
}
inline ::Protocol::ItemType ItemInfo::_internal_itemtype() const {
  return static_cast< ::Protocol::ItemType >(_impl_.itemtype_);
}
inline ::Protocol::ItemType ItemInfo::itemtype() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.itemType)
  return _internal_itemtype();
}
inline void ItemInfo::_internal_set_itemtype(::Protocol::ItemType value) {
  
  _impl_.itemtype_ = value;
}
inline void ItemInfo::set_itemtype(::Protocol::ItemType value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.itemType)
}

// int32 count = 7;
inline void ItemInfo::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ItemInfo::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.count)
  return _internal_count();
}
inline void ItemInfo::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ItemInfo::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.count)
}

// int32 slot = 8;
inline void ItemInfo::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t ItemInfo::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t ItemInfo::slot() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.slot)
  return _internal_slot();
}
inline void ItemInfo::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void ItemInfo::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.slot)
}

// int32 IsEquipped = 9;
inline void ItemInfo::clear_isequipped() {
  _impl_.isequipped_ = 0;
}
inline int32_t ItemInfo::_internal_isequipped() const {
  return _impl_.isequipped_;
}
inline int32_t ItemInfo::isequipped() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.IsEquipped)
  return _internal_isequipped();
}
inline void ItemInfo::_internal_set_isequipped(int32_t value) {
  
  _impl_.isequipped_ = value;
}
inline void ItemInfo::set_isequipped(int32_t value) {
  _internal_set_isequipped(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.IsEquipped)
}

// int32 Price = 10;
inline void ItemInfo::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t ItemInfo::_internal_price() const {
  return _impl_.price_;
}
inline int32_t ItemInfo::price() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.Price)
  return _internal_price();
}
inline void ItemInfo::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void ItemInfo::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.Price)
}

// -------------------------------------------------------------------

// Position

// float LocationX = 1;
inline void Position::clear_locationx() {
  _impl_.locationx_ = 0;
}
inline float Position::_internal_locationx() const {
  return _impl_.locationx_;
}
inline float Position::locationx() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.LocationX)
  return _internal_locationx();
}
inline void Position::_internal_set_locationx(float value) {
  
  _impl_.locationx_ = value;
}
inline void Position::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.LocationX)
}

// float LocationY = 2;
inline void Position::clear_locationy() {
  _impl_.locationy_ = 0;
}
inline float Position::_internal_locationy() const {
  return _impl_.locationy_;
}
inline float Position::locationy() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.LocationY)
  return _internal_locationy();
}
inline void Position::_internal_set_locationy(float value) {
  
  _impl_.locationy_ = value;
}
inline void Position::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.LocationY)
}

// float LocationZ = 3;
inline void Position::clear_locationz() {
  _impl_.locationz_ = 0;
}
inline float Position::_internal_locationz() const {
  return _impl_.locationz_;
}
inline float Position::locationz() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.LocationZ)
  return _internal_locationz();
}
inline void Position::_internal_set_locationz(float value) {
  
  _impl_.locationz_ = value;
}
inline void Position::set_locationz(float value) {
  _internal_set_locationz(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.LocationZ)
}

// float RotationX = 4;
inline void Position::clear_rotationx() {
  _impl_.rotationx_ = 0;
}
inline float Position::_internal_rotationx() const {
  return _impl_.rotationx_;
}
inline float Position::rotationx() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.RotationX)
  return _internal_rotationx();
}
inline void Position::_internal_set_rotationx(float value) {
  
  _impl_.rotationx_ = value;
}
inline void Position::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.RotationX)
}

// float RotationY = 5;
inline void Position::clear_rotationy() {
  _impl_.rotationy_ = 0;
}
inline float Position::_internal_rotationy() const {
  return _impl_.rotationy_;
}
inline float Position::rotationy() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.RotationY)
  return _internal_rotationy();
}
inline void Position::_internal_set_rotationy(float value) {
  
  _impl_.rotationy_ = value;
}
inline void Position::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.RotationY)
}

// float RotationZ = 6;
inline void Position::clear_rotationz() {
  _impl_.rotationz_ = 0;
}
inline float Position::_internal_rotationz() const {
  return _impl_.rotationz_;
}
inline float Position::rotationz() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.RotationZ)
  return _internal_rotationz();
}
inline void Position::_internal_set_rotationz(float value) {
  
  _impl_.rotationz_ = value;
}
inline void Position::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.RotationZ)
}

// float VelocityX = 7;
inline void Position::clear_velocityx() {
  _impl_.velocityx_ = 0;
}
inline float Position::_internal_velocityx() const {
  return _impl_.velocityx_;
}
inline float Position::velocityx() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.VelocityX)
  return _internal_velocityx();
}
inline void Position::_internal_set_velocityx(float value) {
  
  _impl_.velocityx_ = value;
}
inline void Position::set_velocityx(float value) {
  _internal_set_velocityx(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.VelocityX)
}

// float VelocityY = 8;
inline void Position::clear_velocityy() {
  _impl_.velocityy_ = 0;
}
inline float Position::_internal_velocityy() const {
  return _impl_.velocityy_;
}
inline float Position::velocityy() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.VelocityY)
  return _internal_velocityy();
}
inline void Position::_internal_set_velocityy(float value) {
  
  _impl_.velocityy_ = value;
}
inline void Position::set_velocityy(float value) {
  _internal_set_velocityy(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.VelocityY)
}

// float VelocityZ = 9;
inline void Position::clear_velocityz() {
  _impl_.velocityz_ = 0;
}
inline float Position::_internal_velocityz() const {
  return _impl_.velocityz_;
}
inline float Position::velocityz() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.VelocityZ)
  return _internal_velocityz();
}
inline void Position::_internal_set_velocityz(float value) {
  
  _impl_.velocityz_ = value;
}
inline void Position::set_velocityz(float value) {
  _internal_set_velocityz(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.VelocityZ)
}

// float Horizontal = 10;
inline void Position::clear_horizontal() {
  _impl_.horizontal_ = 0;
}
inline float Position::_internal_horizontal() const {
  return _impl_.horizontal_;
}
inline float Position::horizontal() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.Horizontal)
  return _internal_horizontal();
}
inline void Position::_internal_set_horizontal(float value) {
  
  _impl_.horizontal_ = value;
}
inline void Position::set_horizontal(float value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.Horizontal)
}

// float Vertical = 11;
inline void Position::clear_vertical() {
  _impl_.vertical_ = 0;
}
inline float Position::_internal_vertical() const {
  return _impl_.vertical_;
}
inline float Position::vertical() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.Vertical)
  return _internal_vertical();
}
inline void Position::_internal_set_vertical(float value) {
  
  _impl_.vertical_ = value;
}
inline void Position::set_vertical(float value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.Vertical)
}

// int32 IsRunning = 12;
inline void Position::clear_isrunning() {
  _impl_.isrunning_ = 0;
}
inline int32_t Position::_internal_isrunning() const {
  return _impl_.isrunning_;
}
inline int32_t Position::isrunning() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.IsRunning)
  return _internal_isrunning();
}
inline void Position::_internal_set_isrunning(int32_t value) {
  
  _impl_.isrunning_ = value;
}
inline void Position::set_isrunning(int32_t value) {
  _internal_set_isrunning(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.IsRunning)
}

// -------------------------------------------------------------------

// Stat

// int32 Level = 1;
inline void Stat::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t Stat::_internal_level() const {
  return _impl_.level_;
}
inline int32_t Stat::level() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.Level)
  return _internal_level();
}
inline void Stat::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void Stat::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.Level)
}

// int32 MaxHp = 2;
inline void Stat::clear_maxhp() {
  _impl_.maxhp_ = 0;
}
inline int32_t Stat::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline int32_t Stat::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.MaxHp)
  return _internal_maxhp();
}
inline void Stat::_internal_set_maxhp(int32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void Stat::set_maxhp(int32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.MaxHp)
}

// int32 Hp = 3;
inline void Stat::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t Stat::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t Stat::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.Hp)
  return _internal_hp();
}
inline void Stat::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void Stat::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.Hp)
}

// float Damage = 4;
inline void Stat::clear_damage() {
  _impl_.damage_ = 0;
}
inline float Stat::_internal_damage() const {
  return _impl_.damage_;
}
inline float Stat::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.Damage)
  return _internal_damage();
}
inline void Stat::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void Stat::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.Damage)
}

// float AttackRange = 5;
inline void Stat::clear_attackrange() {
  _impl_.attackrange_ = 0;
}
inline float Stat::_internal_attackrange() const {
  return _impl_.attackrange_;
}
inline float Stat::attackrange() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.AttackRange)
  return _internal_attackrange();
}
inline void Stat::_internal_set_attackrange(float value) {
  
  _impl_.attackrange_ = value;
}
inline void Stat::set_attackrange(float value) {
  _internal_set_attackrange(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.AttackRange)
}

// float SearchRange = 6;
inline void Stat::clear_searchrange() {
  _impl_.searchrange_ = 0;
}
inline float Stat::_internal_searchrange() const {
  return _impl_.searchrange_;
}
inline float Stat::searchrange() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.SearchRange)
  return _internal_searchrange();
}
inline void Stat::_internal_set_searchrange(float value) {
  
  _impl_.searchrange_ = value;
}
inline void Stat::set_searchrange(float value) {
  _internal_set_searchrange(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.SearchRange)
}

// float MoveSpeed = 7;
inline void Stat::clear_movespeed() {
  _impl_.movespeed_ = 0;
}
inline float Stat::_internal_movespeed() const {
  return _impl_.movespeed_;
}
inline float Stat::movespeed() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.MoveSpeed)
  return _internal_movespeed();
}
inline void Stat::_internal_set_movespeed(float value) {
  
  _impl_.movespeed_ = value;
}
inline void Stat::set_movespeed(float value) {
  _internal_set_movespeed(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.MoveSpeed)
}

// int32 TotalExp = 8;
inline void Stat::clear_totalexp() {
  _impl_.totalexp_ = 0;
}
inline int32_t Stat::_internal_totalexp() const {
  return _impl_.totalexp_;
}
inline int32_t Stat::totalexp() const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.TotalExp)
  return _internal_totalexp();
}
inline void Stat::_internal_set_totalexp(int32_t value) {
  
  _impl_.totalexp_ = value;
}
inline void Stat::set_totalexp(int32_t value) {
  _internal_set_totalexp(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.TotalExp)
}

// repeated string Skills = 9;
inline int Stat::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int Stat::skills_size() const {
  return _internal_skills_size();
}
inline void Stat::clear_skills() {
  _impl_.skills_.Clear();
}
inline std::string* Stat::add_skills() {
  std::string* _s = _internal_add_skills();
  // @@protoc_insertion_point(field_add_mutable:Protocol.Stat.Skills)
  return _s;
}
inline const std::string& Stat::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const std::string& Stat::skills(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Stat.Skills)
  return _internal_skills(index);
}
inline std::string* Stat::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Stat.Skills)
  return _impl_.skills_.Mutable(index);
}
inline void Stat::set_skills(int index, const std::string& value) {
  _impl_.skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Stat.Skills)
}
inline void Stat::set_skills(int index, std::string&& value) {
  _impl_.skills_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.Stat.Skills)
}
inline void Stat::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Stat.Skills)
}
inline void Stat::set_skills(int index, const char* value, size_t size) {
  _impl_.skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Stat.Skills)
}
inline std::string* Stat::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline void Stat::add_skills(const std::string& value) {
  _impl_.skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.Stat.Skills)
}
inline void Stat::add_skills(std::string&& value) {
  _impl_.skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.Stat.Skills)
}
inline void Stat::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.Stat.Skills)
}
inline void Stat::add_skills(const char* value, size_t size) {
  _impl_.skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.Stat.Skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stat::skills() const {
  // @@protoc_insertion_point(field_list:Protocol.Stat.Skills)
  return _impl_.skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stat::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Stat.Skills)
  return &_impl_.skills_;
}

// -------------------------------------------------------------------

// CharacterListElement

// .Protocol.ObjectInfo PlayerInfo = 1;
inline bool CharacterListElement::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool CharacterListElement::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void CharacterListElement::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::Protocol::ObjectInfo& CharacterListElement::_internal_playerinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& CharacterListElement::playerinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterListElement.PlayerInfo)
  return _internal_playerinfo();
}
inline void CharacterListElement::unsafe_arena_set_allocated_playerinfo(
    ::Protocol::ObjectInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CharacterListElement.PlayerInfo)
}
inline ::Protocol::ObjectInfo* CharacterListElement::release_playerinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* CharacterListElement::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:Protocol.CharacterListElement.PlayerInfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* CharacterListElement::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::Protocol::ObjectInfo* CharacterListElement::mutable_playerinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterListElement.PlayerInfo)
  return _msg;
}
inline void CharacterListElement::set_allocated_playerinfo(::Protocol::ObjectInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterListElement.PlayerInfo)
}

// .Protocol.ItemInfo EquippedItem = 2;
inline bool CharacterListElement::_internal_has_equippeditem() const {
  return this != internal_default_instance() && _impl_.equippeditem_ != nullptr;
}
inline bool CharacterListElement::has_equippeditem() const {
  return _internal_has_equippeditem();
}
inline void CharacterListElement::clear_equippeditem() {
  if (GetArenaForAllocation() == nullptr && _impl_.equippeditem_ != nullptr) {
    delete _impl_.equippeditem_;
  }
  _impl_.equippeditem_ = nullptr;
}
inline const ::Protocol::ItemInfo& CharacterListElement::_internal_equippeditem() const {
  const ::Protocol::ItemInfo* p = _impl_.equippeditem_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& CharacterListElement::equippeditem() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterListElement.EquippedItem)
  return _internal_equippeditem();
}
inline void CharacterListElement::unsafe_arena_set_allocated_equippeditem(
    ::Protocol::ItemInfo* equippeditem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equippeditem_);
  }
  _impl_.equippeditem_ = equippeditem;
  if (equippeditem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CharacterListElement.EquippedItem)
}
inline ::Protocol::ItemInfo* CharacterListElement::release_equippeditem() {
  
  ::Protocol::ItemInfo* temp = _impl_.equippeditem_;
  _impl_.equippeditem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* CharacterListElement::unsafe_arena_release_equippeditem() {
  // @@protoc_insertion_point(field_release:Protocol.CharacterListElement.EquippedItem)
  
  ::Protocol::ItemInfo* temp = _impl_.equippeditem_;
  _impl_.equippeditem_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* CharacterListElement::_internal_mutable_equippeditem() {
  
  if (_impl_.equippeditem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.equippeditem_ = p;
  }
  return _impl_.equippeditem_;
}
inline ::Protocol::ItemInfo* CharacterListElement::mutable_equippeditem() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_equippeditem();
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterListElement.EquippedItem)
  return _msg;
}
inline void CharacterListElement::set_allocated_equippeditem(::Protocol::ItemInfo* equippeditem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equippeditem_;
  }
  if (equippeditem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equippeditem);
    if (message_arena != submessage_arena) {
      equippeditem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equippeditem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equippeditem_ = equippeditem;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterListElement.EquippedItem)
}

// int32 Slot = 3;
inline void CharacterListElement::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t CharacterListElement::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t CharacterListElement::slot() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterListElement.Slot)
  return _internal_slot();
}
inline void CharacterListElement::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void CharacterListElement::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterListElement.Slot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemType>() {
  return ::Protocol::ItemType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillType>() {
  return ::Protocol::SkillType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Packet_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Packet_ID>() {
  return ::Protocol::Packet_ID_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Skill_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Skill_ID>() {
  return ::Protocol::Skill_ID_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureState>() {
  return ::Protocol::CreatureState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
